@{
    ViewData["Title"] = "Saved Jobs";
    Layout = "../Shared/_HomeLayout.cshtml";
}

<style>
    :root {
        --primary: #3b82f6;
        --primary-dark: #2563eb;
        --primary-light: #dbeafe;
        --secondary: #6b7280;
        --success: #10b981;
        --info: #0ea5e9;
        --warning: #f59e0b;
        --danger: #ef4444;
        --light: #f9fafb;
        --dark: #111827;
        --gray-50: #f9fafb;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-400: #9ca3af;
        --gray-500: #6b7280;
        --gray-600: #4b5563;
        --gray-700: #374151;
        --gray-800: #1f2937;
        --gray-900: #111827;
        --border-radius-sm: 0.375rem;
        --border-radius: 0.5rem;
        --border-radius-lg: 0.75rem;
        --rounded-lg: 0.5rem;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --font-sans: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    body {
        font-family: var(--font-sans);
        background-color: var(--gray-50);
        color: var(--gray-800);
        line-height: 1.5;
    }

    /* Page Layout */
    .dashboard-container {
        max-width: 1280px;
        margin: 0 auto;
        padding: 1.5rem 1rem 1rem;
    }

    /* Enhanced Header */
    .page-header {
        position: relative;
        margin-bottom: 1rem;
        border-radius: var(--border-radius-lg);
        overflow: hidden;
    }

    .page-header::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 0;
    }

    .page-header-content {
        position: relative;
        max-width: 1280px;
        margin: 0 auto;
        padding: 0 1rem;
        color: var(--dark);
        z-index: 1;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--gray-800);
        margin-bottom: 0.25rem;
        margin-top: 30px;
    }

    .page-subtitle {
       font-size: 1rem;
        color: var(--gray-500);
        font-weight: 400;
    }

    /* Improved Stats Cards */
    .dashboard-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background-color: white;
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-md);
        padding: 1.75rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid var(--gray-100);
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-lg);
        border-color: var(--primary-light);
    }

    .stat-icon {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 52px;
        height: 52px;
        background-color: var(--primary-light);
        color: var(--primary);
        border-radius: 14px;
        margin-bottom: 1.25rem;
        font-size: 1.25rem;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--gray-900);
        margin-bottom: 0.25rem;
        line-height: 1.2;
    }

    .stat-label {
        font-size: 1rem;
        color: var(--gray-500);
        font-weight: 500;
    }

    /* Enhanced Control Panel */
    .control-panel {
        background-color: white;
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-md);
        padding: 1.75rem;
        margin-bottom: 2rem;
        border: 1px solid var(--gray-100);
    }

    .control-panel-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--gray-900);
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .control-panel-title i {
        color: var(--primary);
    }

    .filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1.25rem;
        align-items: flex-end;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .filter-label {
        display: block;
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--gray-700);
        margin-bottom: 0.5rem;
    }

    .filter-select {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid var(--gray-300);
        border-radius: var(--border-radius);
        background-color: white;
        font-size: 0.95rem;
        color: var(--gray-800);
        transition: all 0.2s ease-in-out;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%236B7280' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        padding-right: 2.5rem;
        cursor: pointer;
    }

    .filter-select:focus,
    .search-input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem;
        padding-left: 2.75rem;
        border: 1px solid var(--gray-300);
        border-radius: var(--border-radius);
        background-color: white;
        font-size: 0.95rem;
        color: var(--gray-800);
        transition: all 0.2s ease-in-out;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%236B7280' viewBox='0 0 16 16'%3E%3Cpath d='M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z'%3E%3C/path%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: left 1rem center;
    }

    /* Redesigned Job Cards */
    .jobs-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
        gap: 1.75rem;
        perspective: 1000px;
    }

    .job-card {
        background-color: white;
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow);
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        display: flex;
        flex-direction: column;
        border: 1px solid var(--gray-100);
        height: 100%;
        transform-origin: center;
    }

    .job-card:hover {
        transform: translateY(-8px) rotateX(2deg);
        box-shadow: var(--shadow-lg);
        border-color: var(--primary-light);
    }

    .job-card-header {
        padding: 1.75rem 1.75rem 1.25rem;
        display: flex;
        align-items: center;
        gap: 1.25rem;
        border-bottom: 1px solid var(--gray-100);
    }

    .job-logo-wrapper {
        flex-shrink: 0;
        width: 64px;
        height: 64px;
        border-radius: 16px;
        background-color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-sm);
        overflow: hidden;
        border: 1px solid var(--gray-100);
    }

    .job-logo {
        width: 100%;
        height: 100%;
        object-fit: contain;
        padding: 0.5rem;
    }

    .job-title-container {
        flex: 1;
    }

    .job-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--gray-900);
        margin-bottom: 0.375rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        line-height: 1.4;
    }

    .company-name {
        font-size: 1rem;
        color: var(--gray-600);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
    }

    .job-card-body {
        padding: 1.25rem 1.75rem;
        flex: 1;
    }

    .job-meta {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem 1.25rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: 0.95rem;
        color: var(--gray-700);
    }

    .meta-icon {
        color: var(--primary);
        display: flex;
        align-items: center;
        justify-content: center;
        width: 34px;
        height: 34px;
        background-color: var(--primary-light);
        border-radius: 10px;
        flex-shrink: 0;
    }

    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.625rem;
        margin-bottom: 1.25rem;
    }

    .skill-tag {
        background-color: var(--primary-light);
        color: var(--primary);
        font-size: 0.875rem;
        font-weight: 500;
        padding: 0.375rem 0.875rem;
        border-radius: 2rem;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
    }

    .skill-tag:hover {
        background-color: var(--primary);
        color: white;
        transform: translateY(-2px);
    }

    .job-card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.25rem 1.75rem;
        background-color: var(--gray-50);
        border-top: 1px solid var(--gray-100);
        margin-top: auto;
    }

    .posted-time {
        font-size: 0.875rem;
        color: var(--gray-600);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
    }

    .card-actions {
        display: flex;
        gap: 0.75rem;
    }

    .action-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.625rem;
        border-radius: 10px;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-unsave {
        background-color: var(--gray-100);
        color: var(--gray-600);
        width: 38px;
        height: 38px;
    }

    .btn-unsave:hover {
        background-color: var(--danger);
        color: white;
        transform: translateY(-2px);
    }

    .btn-apply {
        background-color: var(--primary);
        color: white;
        padding: 0.625rem 1.25rem;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        border-radius: 10px;
        letter-spacing: 0.01em;
    }

    .btn-apply:hover {
        background-color: var(--primary-dark);
        transform: translateY(-2px);
        color: white;
    }

    /* Enhanced Empty State */
    .empty-state {
        text-align: center;
        padding: 4rem 1rem;
        margin: 2rem auto;
        max-width: 500px;
        animation: fadeIn 0.5s ease forwards;
    }

    .empty-state-icon {
        font-size: 5rem;
        color: var(--primary);
        margin-bottom: 2rem;
        opacity: 0.8;
    }

    .empty-state-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--gray-900);
        margin-bottom: 1rem;
    }

    .empty-state-text {
        font-size: 1.125rem;
        color: var(--gray-600);
        margin-bottom: 2.5rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    .btn-browse {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.625rem;
        padding: 0.875rem 2rem;
        background-color: var(--primary);
        color: white;
        font-weight: 600;
        text-decoration: none;
        border-radius: var(--border-radius);
        transition: all 0.2s ease;
        letter-spacing: 0.01em;
    }

    .btn-browse:hover {
        background-color: var(--primary-dark);
        transform: translateY(-3px);
        box-shadow: var(--shadow-md);
    }

    /* Enhanced Loading State */
    .loading-container {
        text-align: center;
        padding: 4rem 1rem;
        animation: fadeIn 0.5s ease forwards;
    }

    .stats-container {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
    }

    .stat-card {
        background-color: white;
        border-radius: var(--rounded-lg);
        padding: 1.25rem;
        box-shadow: var(--shadow-md);
        flex: 1;
        min-width: 200px;
        border-top: 4px solid transparent;
        transition: transform 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-4px);
    }

    .stat-card.primary {
        border-top-color: var(--primary);
    }

    .stat-card.success {
        border-top-color: var(--success);
    }

    .stat-card.warning {
        border-top-color: var(--warning);
    }

    .stat-card.danger {
        border-top-color: var(--danger);
    }

    .stat-title {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--gray-500);
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .stat-value {
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--gray-800);
        margin-bottom: 0.25rem;
    }

    .spinner {
        width: 50px;
        height: 50px;
        margin: 0 auto 1.5rem;
        border: 4px solid var(--primary-light);
        border-top: 4px solid var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-text {
        font-size: 1.125rem;
        color: var(--gray-600);
        font-weight: 500;
    }

    /* Enhanced Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .fadeIn {
        animation: fadeIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    }

    /* Better Responsive Behavior */
    @@media (max-width: 768px) {
        .page-header {
            padding: 2.5rem 0;
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 2rem;
        }

        .page-subtitle {
            font-size: 1.1rem;
        }

        .jobs-container {
            grid-template-columns: 1fr;
        }

        .filter-group {
            min-width: 100%;
        }
    }

    /* Utility Classes */
    .text-primary {
        color: var(--primary);
    }

    .text-success {
        color: var(--success);
    }

    .text-warning {
        color: var(--warning);
    }

    .text-danger {
        color: var(--danger);
    }
</style>

<div class="page-header">
    <div class="page-header-content">
        <h1 class="page-title">Saved Jobs</h1>
        <p class="page-subtitle">Track and manage opportunities that match your career goals</p>
    </div>
</div>

<div class="dashboard-container">
    <!-- Stats Cards -->
    <div class="dashboard-stats">
        <div class="stat-card primary">
            <div class="stat-title">Total Saved Jobs</div>
            <div class="stat-value" id="totalSavedJobs">0</div>
        </div>
        <div class="stat-card warning">
            <div class="stat-title">Unique Companies</div>
            <div class="stat-value" id="uniqueCompanies">0</div>
        </div>
        <div class="stat-card success">
            <div class="stat-title">Skills In Demand</div>
            <div class="stat-value" id="uniqueSkills">0</div>
        </div>
        <div class="stat-card danger">
            <div class="stat-title">New This Week</div>
            <div class="stat-value" id="recentSaves">0</div>
        </div>
    </div>

    <!-- Control Panel -->
    <div class="control-panel">
        <div class="filter-row">
            <div class="filter-group">
                <label for="jobTitleFilter" class="filter-label">Search by keyword</label>
                <input type="text" id="jobTitleFilter" class="search-input"
                    placeholder="Job title, company, keywords...">
            </div>
            <div class="filter-group">
                <label for="skillFilter" class="filter-label">Skills</label>
                <select id="skillFilter" class="filter-select">
                    <option value="">All Skills</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="locationFilter" class="filter-label">Location</label>
                <select id="locationFilter" class="filter-select">
                    <option value="">All Locations</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="sortBy" class="filter-label">Sort by</label>
                <select id="sortBy" class="filter-select">
                    <option value="recent">Most Recent</option>
                    <option value="salary">Highest Salary</option>
                    <option value="experience">Least Experience</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingContainer" class="loading-container">
        <div class="spinner"></div>
        <p class="loading-text">Fetching your saved jobs...</p>
    </div>

    <!-- Jobs Container -->
    <div id="savedJobsContainer" class="jobs-container">
        <!-- Will be populated dynamically -->
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="empty-state" style="display: none;">
        <div class="empty-state-icon">
            <i class="fas fa-bookmark"></i>
        </div>
        <h2 class="empty-state-title">No Saved Jobs Yet</h2>
        <p class="empty-state-text">Save jobs that interest you to build your personalized collection</p>
        <a href="/jobs" class="btn-browse">
            <i class="fas fa-search"></i> Explore Available Jobs
        </a>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <script>
        function getUserIdFromToken() {
            let token = localStorage.getItem("token");
            if (!token) return null;
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                return payload.uid;
            } catch (e) {
                return null;
            }
        }

        const token = localStorage.getItem("token");
        const userId = getUserIdFromToken();
        let allJobs = []; // Store all jobs for filtering

        $(document).ready(function () {
            if (!userId) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please login first!',
                    text: 'You need to be logged in to view your saved jobs.',
                    confirmButtonColor: '#4361ee'
                }).then(() => {
                    window.location.href = '/account/login';
                });
            } else {
                loadSavedJobs(userId);

                // Setup event listeners for filters
                $("#jobTitleFilter").on("input", filterJobs);
                $("#skillFilter, #locationFilter, #sortBy").on("change", filterJobs);
            }
        });

        function loadSavedJobs(userId) {
            $("#loadingContainer").show();
            $("#savedJobsContainer").hide();
            $("#emptyState").hide();

            $.ajax({
                url: `http://localhost:5086/api/SaveJobApi/saved-jobs/${userId}`,
                type: "GET",
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                success: function (jobs) {
                    $("#loadingContainer").hide();

                    if (!jobs || jobs.length === 0) {
                        $("#emptyState").show();
                        updateStats(0, 0, 0, 0);
                        return;
                    }

                    allJobs = jobs; // Store all jobs

                    // Populate the filters with unique values
                    populateFilters(jobs);

                    // Update stats
                    const uniqueCompanies = [...new Set(jobs.map(job => job.c_company_name))].length;

                    let allSkills = [];
                    jobs.forEach(job => {
                        if (job.c_skills) {
                            const jobSkills = job.c_skills.split(',').map(s => s.trim());
                            allSkills.push(...jobSkills);
                        }
                    });
                    const uniqueSkills = [...new Set(allSkills)].length;

                    const sevenDaysAgo = new Date();
                    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                    const recentJobs = jobs.filter(job => {
                        const [datePart, timePart] = job.c_post_date.split(' ');
                        const [day, month, year] = datePart.split('-');
                        const jobDate = new Date(year, month - 1, day);
                        return jobDate >= sevenDaysAgo;
                    }).length;

                    updateStats(jobs.length, uniqueCompanies, uniqueSkills, recentJobs);

                    // Display jobs
                    displayJobs(jobs);
                },
                error: function (err) {
                    $("#loadingContainer").hide();
                    console.error("Error loading saved jobs:", err);
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to load saved jobs',
                        text: 'There was an error retrieving your saved jobs. Please try again.',
                        confirmButtonColor: '#4361ee'
                    });
                }
            });
        }

        function updateStats(totalJobs, companies, skills, recent) {
            $("#totalSavedJobs").text(totalJobs);
            $("#uniqueCompanies").text(companies);
            $("#uniqueSkills").text(skills);
            $("#recentSaves").text(recent);
        }

        function populateFilters(jobs) {
            // Skills filter
            const skillsSet = new Set();
            jobs.forEach(job => {
                if (job.c_skills) {
                    const jobSkills = job.c_skills.split(',').map(s => s.trim());
                    jobSkills.forEach(skill => skillsSet.add(skill));
                }
            });

            const skillFilter = $("#skillFilter");
            skillFilter.find('option:not(:first)').remove();
            [...skillsSet].sort().forEach(skill => {
                skillFilter.append(`<option value="${skill}">${skill}</option>`);
            });

            // Location filter
            const locationsSet = new Set();
            jobs.forEach(job => {
                if (job.c_job_location) {
                    locationsSet.add(job.c_job_location.trim());
                }
            });

            const locationFilter = $("#locationFilter");
            locationFilter.find('option:not(:first)').remove();
            [...locationsSet].sort().forEach(location => {
                locationFilter.append(`<option value="${location}">${location}</option>`);
            });
        }

        function displayJobs(jobs) {
            const container = $("#savedJobsContainer");
            container.empty();

            jobs.forEach((job, index) => {
                const logoUrl = job.c_company_logo || "https://via.placeholder.com/80";
                const skills = job.c_skills
                    ? job.c_skills.split(',').map(skill =>
                        `<span class="skill-tag">${skill.trim()}</span>`).join('')
                    : '';

                const jobCard = $(`
                        <div class="job-card fadeIn" style="animation-delay: ${index * 0.1}s">
                            <div class="job-card-header">
                                <div class="job-logo-wrapper">
                                    <img src="${logoUrl}" class="job-logo" alt="${job.c_company_name} Logo">
                                </div>
                                <div class="job-title-container">
                                    <h3 class="job-title">${job.c_job_title}</h3>
                                    <div class="company-name">
                                        <i class="fas fa-building"></i> ${job.c_company_name}
                                    </div>
                                </div>
                            </div>
                            <div class="job-card-body">
                                <div class="job-meta">
                                    <div class="meta-item">
                                        <div class="meta-icon">
                                            <i class="fas fa-briefcase"></i>
                                        </div>
                                        <span>${job.c_job_experience || '0'} Yrs Exp</span>
                                    </div>
                                    <div class="meta-item">
                                        <div class="meta-icon">
                                            <i class="fas fa-money-bill-wave"></i>
                                        </div>
                                        <span>${job.c_salary_range || 'Not Disclosed'}</span>
                                    </div>
                                    <div class="meta-item">
                                        <div class="meta-icon">
                                            <i class="fas fa-map-marker-alt"></i>
                                        </div>
                                        <span>${job.c_job_location || 'Remote'}</span>
                                    </div>
                                    <div class="meta-item">
                                        <div class="meta-icon">
                                            <i class="fas fa-file-alt"></i>
                                        </div>
                                        <span>${job.c_job_type || 'Full Time'}</span>
                                    </div>
                                </div>
                                <div class="skills-container">
                                    ${skills}
                                </div>
                            </div>
                            <div class="job-card-footer">
                                <div class="posted-time">
                                    <i class="far fa-clock"></i>
                                    ${timeAgo(job.c_post_date)}
                                </div>
                                <div class="card-actions">
                                    <button class="action-btn btn-unsave" onclick="removeJob(${job.userId}, ${job.jobPostId})">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                    <a href="/CandidateJob/JobDetails?c_job_id=${job.jobPostId}" class="action-btn btn-apply">
                                        Apply Now <i class="fas fa-arrow-right"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    `);

                container.append(jobCard);
            });

            container.show();
            lucide.createIcons();
        }

        function filterJobs() {
            const searchTerm = $("#jobTitleFilter").val().toLowerCase();
            const selectedSkill = $("#skillFilter").val();
            const selectedLocation = $("#locationFilter").val();
            const sortBy = $("#sortBy").val();

            let filteredJobs = [...allJobs];

            // Apply filters
            if (searchTerm) {
                filteredJobs = filteredJobs.filter(job =>
                    (job.c_job_title && job.c_job_title.toLowerCase().includes(searchTerm)) ||
                    (job.c_company_name && job.c_company_name.toLowerCase().includes(searchTerm))
                );
            }

            if (selectedSkill) {
                filteredJobs = filteredJobs.filter(job =>
                    job.c_skills && job.c_skills.toLowerCase().includes(selectedSkill.toLowerCase())
                );
            }

            if (selectedLocation) {
                filteredJobs = filteredJobs.filter(job =>
                    job.c_job_location && job.c_job_location.toLowerCase() === selectedLocation.toLowerCase()
                );
            }

            // Apply sorting
            if (sortBy === 'recent') {
                filteredJobs.sort((a, b) => {
                    const dateA = new Date(a.c_post_date.split(' ')[0].split('-').reverse().join('-'));
                    const dateB = new Date(b.c_post_date.split(' ')[0].split('-').reverse().join('-'));
                    return dateB - dateA;
                });
            } else if (sortBy === 'salary') {
                filteredJobs.sort((a, b) => {
                    const salaryA = extractSalary(a.c_salary_range);
                    const salaryB = extractSalary(b.c_salary_range);
                    return salaryB - salaryA;
                });
            } else if (sortBy === 'experience') {
                filteredJobs.sort((a, b) => {
                    const expA = parseInt(a.c_job_experience || '0');
                    const expB = parseInt(b.c_job_experience || '0');
                    return expA - expB;
                });
            }

            // Display filtered jobs
            if (filteredJobs.length === 0) {
                $("#savedJobsContainer").empty().append(`
                        <div class="col-12 text-center my-5">
                            <i class="fas fa-filter fa-3x mb-3" style="color: var(--gray-400);"></i>
                            <h3>No matching jobs found</h3>
                            <p>Try adjusting your filters to see more results</p>
                        </div>
                    `);
            } else {
                displayJobs(filteredJobs);
            }
        }

        function extractSalary(salaryString) {
            if (!salaryString) return 0;
            const match = salaryString.match(/\d+/g);
            return match ? parseInt(match[match.length - 1]) : 0;
        }

        function removeJob(userId, jobPostId) {
            Swal.fire({
                title: 'Remove from saved jobs?',
                text: "You can always save this job again later",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#4361ee',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, remove it',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `http://localhost:5086/api/SaveJobApi/remove?userId=${userId}&jobPostId=${jobPostId}`,
                        type: "DELETE",
                        headers: {
                            'Authorization': `Bearer ${token}`
                        },
                        success: function () {
                            Swal.fire({
                                icon: 'success',
                                title: 'Job Removed',
                                text: 'The job has been removed from your saved list',
                                confirmButtonColor: '#4361ee',
                                timer: 2000,
                                timerProgressBar: true
                            });

                            // Update the jobs list without full reload
                            allJobs = allJobs.filter(job => !(job.userId === userId && job.jobPostId === jobPostId));

                            // Update stats
                            const uniqueCompanies = [...new Set(allJobs.map(job => job.c_company_name))].length;

                            let allSkills = [];
                            allJobs.forEach(job => {
                                if (job.c_skills) {
                                    const jobSkills = job.c_skills.split(',').map(s => s.trim());
                                    allSkills.push(...jobSkills);
                                }
                            });
                            const uniqueSkills = [...new Set(allSkills)].length;

                            const sevenDaysAgo = new Date();
                            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                            const recentJobs = allJobs.filter(job => {
                                const [datePart, timePart] = job.c_post_date.split(' ');
                                const [day, month, year] = datePart.split('-');
                                const jobDate = new Date(year, month - 1, day);
                                return jobDate >= sevenDaysAgo;
                            }).length;

                            updateStats(allJobs.length, uniqueCompanies, uniqueSkills, recentJobs);

                            if (allJobs.length === 0) {
                                $("#savedJobsContainer").hide();
                                $("#emptyState").show();
                            } else {
                                // Re-apply current filters
                                filterJobs();
                            }
                        },
                        error: function () {
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed to remove job',
                                text: 'There was an error removing this job. Please try again.',
                                confirmButtonColor: '#4361ee'
                            });
                        }
                    });
                }
            });
        }

        function timeAgo(dateString) {
            // Parse the date string in DD-MM-YYYY HH:mm:ss format
            const [datePart, timePart] = dateString.split(' ');
            const [day, month, year] = datePart.split('-');
            const [hours, minutes, seconds] = timePart.split(':');
            // Create a Date object (months are 0-based in JavaScript, so subtract 1 from month)
            const posted = new Date(year, month - 1, day, hours, minutes, seconds);

            const now = new Date(); // Current date and time
            const diffInMs = now - posted; // Difference in milliseconds

            const diffInMinutes = Math.floor(diffInMs / (1000 * 60)); // Convert to minutes
            const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60)); // Convert to hours
            const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24)); // Convert to days

            if (diffInMinutes < 60) {
                return `${diffInMinutes} minute${diffInMinutes === 1 ? '' : 's'} ago`;
            } else if (diffInHours < 24) {
                return `${diffInHours} hour${diffInHours === 1 ? '' : 's'} ago`;
            } else {
                return `${diffInDays} day${diffInDays === 1 ? '' : 's'} ago`;
            }
        }
    </script>
}