@{
    Layout = "../Shared/_HomeLayout.cshtml";
}

<style>
    :root {
        --primary: #4361ee;
        --primary-dark: #1e40af;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-400: #9ca3af;
        --gray-500: #6b7280;
        --gray-800: #1f2937;
        --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --rounded-md: 0.375rem;
        --rounded-lg: 0.5rem;
    }

    body {
        background-color: #f9fafb;
        color: var(--gray-800);
    }

    .dashboard-container {
        max-width: 1280px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .dashboard-title-section {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .dashboard-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--gray-800);
        margin-bottom: 0.25rem;
    }

    .dashboard-subtitle {
        font-size: 1rem;
        color: var(--gray-500);
        font-weight: 400;
    }

    .stats-container {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
    }

    .stat-card {
        background-color: white;
        border-radius: var(--rounded-lg);
        padding: 1.25rem;
        box-shadow: var(--shadow-md);
        flex: 1;
        min-width: 200px;
        border-top: 4px solid transparent;
        transition: transform 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-4px);
    }

    .stat-card.primary { border-top-color: var(--primary); }
    .stat-card.success { border-top-color: var(--success); }
    .stat-card.warning { border-top-color: var(--warning); }
    .stat-card.danger { border-top-color: var(--danger); }

    .stat-title {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--gray-500);
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .stat-value {
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--gray-800);
        margin-bottom: 0.25rem;
    }

    .filters-section {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

    .search-bar {
        flex: 1;
        min-width: 250px;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid var(--gray-300);
        border-radius: var(--rounded-md);
        background-color: white;
        font-size: 0.9rem;
        transition: border-color 0.15s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--gray-400);
    }

    .filter-button {
        background-color: white;
        border: 1px solid var(--gray-300);
        padding: 0.625rem 1rem;
        border-radius: var(--rounded-md);
        font-weight: 500;
        font-size: 0.875rem;
        color: var(--gray-800);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .filter-button:hover {
        border-color: var(--primary);
        color: var(--primary);
    }

    .filter-button.active {
        background-color: var(--primary);
        border-color: var(--primary);
        color: white;
    }

    .back-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background-color: white;
        color: var(--primary);
        border: 1px solid var(--primary);
        padding: 0.625rem 1.25rem;
        border-radius: var(--rounded-md);
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .back-button:hover {
        background-color: var(--primary);
        color: white;
    }

    .applications-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1.5rem;
    }

    .application-card {
        background-color: white;
        border-radius: var(--rounded-lg);
        overflow: hidden;
        box-shadow: var(--shadow-md);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 1px solid var(--gray-200);
        display: flex;
        flex-direction: column;
        height: 100%;
        cursor: pointer;
    }

    .application-card:hover {
        transform: translateY(-6px);
        box-shadow: var(--shadow-lg);
    }

    .card-header {
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        border-bottom: 1px solid var(--gray-200);
    }

    .company-logo {
        width: 50px;
        height: 50px;
        border-radius: var(--rounded-md);
        object-fit: contain;
        background-color: var(--gray-100);
        padding: 0.25rem;
    }

    .card-header-content {
        flex: 1;
    }

    .job-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--gray-800);
        margin-bottom: 0.25rem;
        line-height: 1.4;
    }

    .company-name {
        font-size: 0.875rem;
        color: var(--gray-500);
        margin-bottom: 0.25rem;
    }

    .job-location {
        font-size: 0.813rem;
        color: var(--primary);
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .status-badge {
        padding: 0.375rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .status-applied {
        background-color: rgba(79, 70, 229, 0.1);
        color: var(--primary);
    }

    .status-review {
        background-color: rgba(245, 158, 11, 0.1);
        color: var(--warning);
    }

    .status-shortlisted {
        background-color: rgba(16, 185, 129, 0.1);
        color: var(--success);
    }

    .status-rejected {
        background-color: rgba(239, 68, 68, 0.1);
        color: var(--danger);
    }

    .card-body {
        padding: 1.5rem;
        flex: 1;
    }

    .info-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
        font-size: 0.875rem;
    }

    .info-label {
        color: var(--gray-500);
    }

    .info-value {
        font-weight: 500;
        color: var(--gray-800);
    }

    .timeline-wrapper {
        margin-top: 1rem;
    }

    .timeline-title {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--gray-500);
        margin-bottom: 0.75rem;
    }

    .timeline-track {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        margin: 2rem 0 1.5rem 0;
    }

    .timeline-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
        position: relative;
        z-index: 2;
    }

    .timeline-step:not(:last-child)::after {
        content: '';
        position: absolute;
        top: 18px;
        left: 0%;
        width: 100%;
        height: 4px;
        background: var(--gray-200);
        z-index: 1;
        transform: translateX(50%);
    }

    .timeline-step.completed:not(:last-child)::after,
    .timeline-step.current:not(:last-child)::after {
        background: var(--primary);
    }

    .timeline-dot {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: var(--gray-200);
        color: var(--gray-500);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 1.1rem;
        border: 3px solid var(--gray-200);
        margin-bottom: 0.5rem;
        z-index: 2;
        transition: all 0.2s;
    }

    .timeline-step.completed .timeline-dot {
        background: var(--primary);
        color: #fff;
        border-color: var(--primary);
    }

    .timeline-step.current .timeline-dot {
        background: #fff;
        color: var(--primary);
        border-color: var(--primary);
        box-shadow: 0 0 0 4px rgba(67, 97, 238, 0.15);
    }

    .timeline-step.rejected .timeline-dot {
        background: var(--danger);
        color: #fff;
        border-color: var(--danger);
    }

    .timeline-label {
        font-size: 0.85rem;
        color: var(--gray-500);
        text-align: center;
        font-weight: 500;
        margin-top: 0.25rem;
    }

    .timeline-step.completed .timeline-label,
    .timeline-step.current .timeline-label {
        color: var(--primary);
        font-weight: 600;
    }

    .timeline-step.rejected .timeline-label {
        color: var(--danger);
        font-weight: 600;
    }

    .card-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid var(--gray-200);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .date-applied {
        font-size: 0.813rem;
        color: var(--gray-500);
    }

    .action-button {
        background-color: transparent;
        border: none;
        color: var(--primary);
        font-size: 0.875rem;
        font-weight: 500;
        padding: 0.5rem;
        cursor: pointer;
        border-radius: var(--rounded-md);
        transition: all 0.2s ease;
    }

    .action-button:hover {
        background-color: rgba(79, 70, 229, 0.1);
    }

    .no-applications {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 3rem;
        background-color: white;
        border-radius: var(--rounded-lg);
        box-shadow: var(--shadow-md);
        text-align: center;
        gap: 1rem;
    }

    .no-data-icon {
        font-size: 3rem;
        color: var(--gray-300);
    }

    .no-data-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--gray-800);
    }

    .no-data-message {
        color: var(--gray-500);
        max-width: 400px;
        margin: 0 auto;
    }

    .loading-indicator {
        display: flex;
        justify-content: center;
        padding: 2rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: var(--gray-500);
    }

    @@media (max-width: 768px) {
        .stats-container {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .applications-container {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 640px) {
        .dashboard-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .stats-container {
            grid-template-columns: 1fr;
        }
        
        .filters-section {
            flex-direction: column;
            align-items: stretch;
        }
    }

    .timeline-step.shortlisted .timeline-dot {
    background: var(--success);
    color: #fff;
    border-color: var(--success);
}
.timeline-step.shortlisted .timeline-label {
    color: var(--success);
    font-weight: 600;
}
</style>

<div class="dashboard-container">
    <div class="dashboard-header">
        <div class="dashboard-title-section">
            <h1 class="dashboard-title">Application Tracker</h1>
            <p class="dashboard-subtitle">Track the status of all your job applications</p>
        </div>
        <button onclick="window.location.href='/UserDashboard'" class="back-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
            </svg>
            Back to Dashboard
        </button>
    </div>

    <div class="stats-container" id="statsContainer">
        <!-- Stats will be populated by JS -->
    </div>

    <div class="filters-section">
        <div class="search-bar">
            <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
            </svg>
            <input type="text" id="searchInput" class="search-input" placeholder="Search by job title, company...">
        </div>
        <button class="filter-button active" data-filter="all">All Applications</button>
        <button class="filter-button" data-filter="active">In Progress</button>
        <button class="filter-button" data-filter="completed">Completed</button>
    </div>

    <div class="loading-indicator" id="loadingIndicator">
        <div class="spinner">Loading...</div>
    </div>

    <div class="applications-container" id="applicationsCardContainer">
        <!-- Application cards will be populated here -->
    </div>
</div>

@section Scripts {
    <script>
        function getUserIdFromToken() {
            let token = localStorage.getItem("token");
            if (!token) return null;

            let payload = JSON.parse(atob(token.split('.')[1]));
            return payload.uid;
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
        }

        function getStatusClass(status) {
            switch(status.trim()) {
                case 'Applied': return 'status-applied';
                case 'Under Review': return 'status-review';
                case 'Shortlisted': return 'status-shortlisted';
                case 'Rejected': return 'status-rejected';
                default: return 'status-applied';
            }
        }

        function getTimelineProgress(currentStatus, isRejected) {
            const statuses = ["Applied", "Under Review", "Shortlisted"];
            if (isRejected) return '50%'; // For rejected, show halfway
            
            const index = statuses.indexOf(currentStatus);
            if (index === -1) return '0%';
            
            return `${(index / (statuses.length - 1)) * 100}%`;
        }

        function renderApplicationCards(applications) {
            const container = $("#applicationsCardContainer");
            const statsContainer = $("#statsContainer");
            
            // Hide loading indicator
            $("#loadingIndicator").hide();
            
            if (applications.length === 0) {
                container.html(`
                    <div class="no-applications">
                        <div class="no-data-icon">📋</div>
                        <h3 class="no-data-title">No applications yet</h3>
                        <p class="no-data-message">You haven't applied to any jobs yet. Start exploring opportunities and submit your applications.</p>
                    </div>
                `);
                return;
            }
            
            // Calculate statistics
            const stats = {
                total: applications.length,
                inProgress: applications.filter(app => app.c_status !== "Rejected" && app.c_status !== "Shortlisted").length,
                shortlisted: applications.filter(app => app.c_status === "Shortlisted").length,
                rejected: applications.filter(app => app.c_status === "Rejected").length
            };
            
            // Render stats
            statsContainer.html(`
                <div class="stat-card primary">
                    <div class="stat-title">Total Applications</div>
                    <div class="stat-value">${stats.total}</div>
                </div>
                <div class="stat-card warning">
                    <div class="stat-title">In Progress</div>
                    <div class="stat-value">${stats.inProgress}</div>
                </div>
                <div class="stat-card success">
                    <div class="stat-title">Shortlisted</div>
                    <div class="stat-value">${stats.shortlisted}</div>
                </div>
                <div class="stat-card danger">
                    <div class="stat-title">Rejected</div>
                    <div class="stat-value">${stats.rejected}</div>
                </div>
            `);
            
            // Clear and repopulate cards
            container.empty();
            
            applications.forEach(app => {
                const currentStatus = app.c_status.trim();
                const isRejected = currentStatus === "Rejected";
                
                // Define timeline steps based on status
                const timelineSteps = isRejected 
                    ? ["Applied", "Under Review", "Rejected"] 
                    : ["Applied", "Under Review", "Shortlisted"];
                
                let timelineHTML = `
                    <div class="timeline-wrapper">
                        <div class="timeline-title">Application Progress</div>
                        <div class="timeline-track">
                `;
                
                timelineSteps.forEach((step, idx) => {
                let stepClass = '';
                if (step === currentStatus) {
                    if (isRejected) {
                        stepClass = 'rejected';
                    } else if (step === "Shortlisted") {
                        stepClass = 'shortlisted';
                    } else {
                        stepClass = 'current';
                    }
                } else if (timelineSteps.indexOf(step) < timelineSteps.indexOf(currentStatus)) {
                    stepClass = 'completed';
                }
                timelineHTML += `
                    <div class="timeline-step ${stepClass}">
                        <div class="timeline-dot">${idx + 1}</div>
                        <div class="timeline-label">${step}</div>
                    </div>
                `;
            });
                
                timelineHTML += `</div></div>`;
                
                const card = `
                    <div class="application-card" data-status="${currentStatus.toLowerCase()}" onclick="window.location.href='/CandidateJob/JobDetails?c_job_id=${app.c_job_id}'">
                        <div class="card-header">
                            <img src="${app.company.c_company_logo}" alt="${app.company.c_company_name}" class="company-logo">
                            <div class="card-header-content">
                                <h3 class="job-title">${app.job_Post.c_job_title}</h3>
                                <p class="company-name">${app.company.c_company_name}</p>
                                <p class="job-location">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                                    </svg>
                                    ${app.job_Post.c_job_location}
                                </p>
                            </div>
                            <span class="status-badge ${getStatusClass(currentStatus)}">${currentStatus}</span>
                        </div>
                        <div class="card-body">
                            <div class="info-row">
                                <span class="info-label">Job Type</span>
                                <span class="info-value">${app.job_Post.c_job_type || 'Full-Time'}</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Industry</span>
                                <span class="info-value">${app.company.c_industry || 'Technology'}</span>
                            </div>
                            ${timelineHTML}
                        </div>
                        <div class="card-footer">
                            <span class="date-applied">Applied on: ${formatDate(app.c_apply_date)}</span>
                            <button class="action-button" onclick="event.stopPropagation();">View Details</button>
                        </div>
                    </div>
                `;
                container.append(card);
            });
            
            // Initialize filters
            initializeFilters();
        }
        
        function initializeFilters() {
            // Search functionality
            $("#searchInput").on("keyup", function() {
                const value = $(this).val().toLowerCase();
                $(".application-card").filter(function() {
                    const text = $(this).text().toLowerCase();
                    $(this).toggle(text.indexOf(value) > -1);
                });
                
                checkEmptyState();
            });
            
            // Filter buttons
            $(".filter-button").on("click", function() {
                $(".filter-button").removeClass("active");
                $(this).addClass("active");
                
                const filter = $(this).data("filter");
                if (filter === "all") {
                    $(".application-card").show();
                } else if (filter === "active") {
                    $(".application-card").hide();
                    $(".application-card[data-status='applied'], .application-card[data-status='under review']").show();
                } else if (filter === "completed") {
                    $(".application-card").hide();
                    $(".application-card[data-status='shortlisted'], .application-card[data-status='rejected']").show();
                }
                
                checkEmptyState();
            });
        }
        
        function checkEmptyState() {
            const visibleCards = $(".application-card:visible").length;
            if (visibleCards === 0) {
                if ($("#emptyStateMessage").length === 0) {
                    $("#applicationsCardContainer").append(`
                        <div id="emptyStateMessage" class="empty-state">
                            <p>No applications match your current filters.</p>
                        </div>
                    `);
                }
            } else {
                $("#emptyStateMessage").remove();
            }
        }

        $(document).ready(function () {
            const userId = getUserIdFromToken();
            
            $.ajax({
                url: `http://localhost:5086/api/ApplyJob/GetUserAppliedJobApplication/${userId}`,
                method: 'GET',
                success: function (applications) {
                    renderApplicationCards(applications);
                },
                error: function (error) {
                    console.error('Error fetching applications:', error);
                    $("#loadingIndicator").hide();
                    $("#applicationsCardContainer").html(`
                        <div class="no-applications">
                            <div class="no-data-icon">⚠️</div>
                            <h3 class="no-data-title">Couldn't load applications</h3>
                            <p class="no-data-message">There was an error loading your applications. Please try again later.</p>
                        </div>
                    `);
                }
            });
        });
    </script>
}