@{
    ViewData["Title"] = "Hired Candidates";
    Layout = "_RecruiterLayout";
}

<style>
    :root {
        --primary: #4361ee;
        --primary-light: rgba(67, 97, 238, 0.1);
        --secondary: #3f37c9;
        --success: #10b981;
        --success-light: rgba(16, 185, 129, 0.1);
        --danger: #ef4444;
        --danger-light: rgba(239, 68, 68, 0.1);
        --warning: #f59e0b;
        --text-dark: #1e293b;
        --text-light: #64748b;
        --text-muted: #94a3b8;
        --border-color: #e2e8f0;
        --card-bg: #ffffff;
        --body-bg: #f8fafc;
    }

    body {
        background-color: var(--body-bg);
        color: var(--text-dark);
    }

    .dashboard-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 1.5rem;
        animation: fadeIn 0.5s ease-out forwards;
    }

    /* Dashboard Header */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--border-color);
    }

    .dashboard-title {
        font-size: 1.85rem;
        font-weight: 700;
        color: var(--dark);
        position: relative;
        padding-bottom: 0.75rem;
        margin-bottom: 1rem;
        letter-spacing: -0.02em;
    }

    .dashboard-title:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 70px;
        height: 4px;
        background: linear-gradient(90deg, var(--primary), #6e8efb);
        border-radius: 4px;
    }

    /* Stats Cards */
   .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2.5rem;
        animation: slideInUp 0.5s ease-out forwards;
    }

    .stat-content h3 {
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0;
        color: var(--dark);
        transition: all 0.2s;
    }

    .stat-card:hover .stat-content h3 {
        color: var(--primary);
    }

    .stat-content p {
        margin: 0;
        color: #64748b;
        font-size: 0.95rem;
        font-weight: 500;
    }

     .stat-card {
        background-color: white;
        border-radius: 14px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        box-shadow: var(--card-shadow);
        border: 1px solid var(--border);
        transition: all 0.3s ease;
    }

     .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.08);
    }

    .stat-title {
        color: var(--text-light);
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .stat-value {
        font-size: 1.875rem;
        font-weight: 700;
        color: var(--text-dark);
        margin-bottom: 0.5rem;
    }

    .stat-change {
        display: flex;
        align-items: center;
        font-size: 0.875rem;
    }

   .stat-icon {
        width: 54px;
        height: 54px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1.25rem;
        font-size: 1.3rem;
        transition: all 0.3s ease;
    }
     .stat-card:hover .stat-icon {
        transform: scale(1.1);
    }

      .stat-icon.purple {
        background-color: #ede9fe;
        color: #7c3aed;
    }

.stat-icon.blue {
        background-color: #dbeafe;
        color: #3b82f6;
    }

     .stat-icon.green {
        background-color: #d7f8ee;
        color: #00c689;
    }
    .stat-icon.red {
        background-color: #ffebeb;
        color: #e53f3c;
    }

    /* Filter Section */
    .filters-section {
        background-color: var(--card-bg);
        border-radius: 0.75rem;
        padding: 1.25rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .filters-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--text-dark);
    }

    .filters-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: flex-end;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .filter-group label {
        display: block;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        color: var(--text-light);
        font-weight: 500;
    }

    .form-select, .form-control {
        width: 100%;
        padding: 0.625rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        background-color: var(--card-bg);
        color: var(--text-dark);
        font-size: 0.875rem;
        transition: all 0.15s ease;
    }

    .form-select:focus, .form-control:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        outline: none;
    }

    /* Table Styling */
    .table-container {
        background-color: var(--card-bg);
        border-radius: 0.75rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }
    
    .table-responsive {
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    
    .table {
        width: 100%;
        margin-bottom: 0;
        border-collapse: separate;
        border-spacing: 0;
        white-space: nowrap;
    }
    
    /* Professional table styling */
    .table thead {
        position: sticky;
        top: 0;
        z-index: 10;
    }
    
    .table thead th {
        background-color: #f1f5f9;
        color: var(--text-light);
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.05em;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--border-color);
        text-align: left;
        position: relative;
    }
    
    .table thead th:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background-color: var(--border-color);
    }
    
    .table tbody tr {
        transition: all 0.15s ease;
    }
    
    .table tbody tr:nth-child(even) {
        background-color: rgba(241, 245, 249, 0.4);
    }
    
    .table tbody tr:hover {
        background-color: rgba(67, 97, 238, 0.05);
    }
    
    .table tbody td {
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid var(--border-color);
        vertical-align: middle;
        color: var(--text-dark);
        font-size: 0.875rem;
    }
    
    .table tbody tr:last-child td {
        border-bottom: none;
    }
    
    /* Scrollbar styling for the table */
    .table-responsive::-webkit-scrollbar {
        height: 6px;
    }
    
    .table-responsive::-webkit-scrollbar-track {
        background: rgba(241, 245, 249, 0.5);
        border-radius: 10px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb {
        background: rgba(67, 97, 238, 0.3);
        border-radius: 10px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb:hover {
        background: rgba(67, 97, 238, 0.5);
    }
    
    /* Table footer with pagination */
    .table-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        background-color: #f8fafc;
        border-top: 1px solid var(--border-color);
    }
    
    /* Enhanced action buttons */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: nowrap;
    }
    
    .action-btn {
        width: 2.25rem;
        height: 2.25rem;
        padding: 0;
        border-radius: 0.375rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    /* Table loading state */
    .table-loading {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 20;
    }
    
    /* Profile Column */
    .profile-column {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .profile-column img {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid var(--primary);
    }

    .profile-details {
        display: flex;
        flex-direction: column;
    }

    .profile-name {
        font-weight: 600;
        color: var(--text-dark);
        font-size: 0.875rem;
    }

    .profile-email {
        color: var(--text-muted);
        font-size: 0.75rem;
    }

    /* Status Badge */
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        border-radius: 9999px;
        font-weight: 500;
        font-size: 0.75rem;
    }

    .status-badge.hired {
        background-color: var(--success-light);
        color: var(--success);
    }

    .status-badge.pending {
        background-color: rgba(245, 158, 11, 0.1);
        color: var(--warning);
    }

    .status-badge.rejected {
        background-color: var(--danger-light);
        color: var (--danger);
    }

    /* Action Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: 500;
        font-size: 0.875rem;
        transition: all 0.15s ease;
        gap: 0.5rem;
    }

    .btn-primary {
        background-color: var(--primary);
        color: white;
        border: none;
    }

    .btn-primary:hover {
        background-color: var(--secondary);
    }

    .btn-outline {
        background-color: transparent;
        border: 1px solid var(--border-color);
        color: var(--text-light);
    }

    .btn-outline:hover {
        border-color: var(--primary);
        color: var(--primary);
    }

    .action-btn {
        padding: 0.5rem;
        border-radius: 0.375rem;
        transition: all 0.15s ease;
        background-color: var(--primary-light);
        color: var(--primary);
        border: none;
    }

    .action-btn:hover {
        background-color: var(--primary);
        color: white;
    }

    /* Pagination Styling */
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        margin: 0 0.125rem;
        border: 1px solid var(--border-color);
        background-color: var(--card-bg);
        color: var(--text-dark);
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
        background-color: var(--primary);
        color: white !important;
        border-color: var(--primary);
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background-color: var(--primary-light);
        color: var(--primary) !important;
        border-color: var(--primary);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .stats-container {
            grid-template-columns: 1fr;
        }
        
        .filters-row {
            flex-direction: column;
            gap: 1rem;
        }
        
        .filter-group {
            width: 100%;
        }

        .table thead th, .table tbody td {
            padding: 0.75rem 1rem;
        }
        
        .action-buttons {
            gap: 0.25rem;
        }
        
        .action-btn {
            width: 2rem;
            height: 2rem;
        }
    }
</style>

<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h1 class="dashboard-title">Hired Candidates</h1>
    </div>
    
    <!-- Stats Cards -->
    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-icon purple">
                <i class="fas fa-user-check"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalHired" >0</h3>
                <p class="stat-title" >Total Hired</p>
            </div>
            @* <div class="stat-title">Total Hired</div>
            <div class="stat-value" id="totalHired">0</div> *@
        </div>
        <div class="stat-card">
            <div class="stat-icon green">
                <i class="fas fa-briefcase"></i>
            </div>
            <div class="stat-content">
                <h3 id="openPositions" >0</h3>
                <p class="stat-title">Open Positions</p>
            </div>
            @* <div class="stat-title">Open Positions</div>
            <div class="stat-value" id="openPositions">0</div> *@
        </div>
        <div class="stat-card">
            <div class="stat-icon red">
                <i class="fas fa-calendar-alt"></i>
            </div>
            <div class="stat-content">
                <h3 id="thisMonth">0</h3>
                <p class="stat-title">This Month</p>
            </div>
            @* <div class="stat-title">This Month</div>
            <div class="stat-value" id="thisMonth">0</div> *@
        </div>
        <div class="stat-card">
            <div class="stat-icon blue">
                <i class="fas fa-file-contract"></i>
            </div>
             <div class="stat-content">
                <h3 id="pendingOnboarding">0</h3>
                <p class="stat-title">Pending</p>
            </div>
            @* <div class="stat-title">Pending Onboarding</div>
            <div class="stat-value" id="pendingOnboarding">0</div> *@
        </div>
    </div>
    
    <!-- Filters Section -->
    <div class="filters-section">
        <h2 class="filters-title">Filter Candidates</h2>
        <div class="filters-row">
            <div class="filter-group">
                <label for="jobTitleFilter">Job Title</label>
                <select id="jobTitleFilter" class="form-select">
                    <option value="">All Job Titles</option>
                    <!-- Dynamic job titles will be populated here -->
                </select>
            </div>
            <div class="filter-group">
                <label for="statusFilter">Status</label>
                <select id="statusFilter" class="form-select">
                    <option value="">All Status</option>
                    <option value="Hired">Hired</option>
                    <option value="Pending Onboarding">Pending Onboarding</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="dateFilter">Hire Date</label>
                <select id="dateFilter" class="form-select">
                    <option value="">All Time</option>
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="quarter">This Quarter</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="searchFilter">Search</label>
                <input type="text" id="searchFilter" class="form-control" placeholder="Search candidates...">
            </div>
        </div>
    </div>
    
    <!-- Table Section -->
    <div class="table-container">
        <div class="table-responsive">
            <table id="applicationsTable" class="table">
                <thead>
                    <tr>
                        <th>Job Title</th>
                        <th>Candidate</th>
                        <th>Contact</th>
                        <th>Hire Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="applicationsTableBody">
                    <!-- Dynamic rows will be populated here -->
                </tbody>
            </table>
        </div>
        <div id="tableLoading" class="table-loading d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
</div>

<script>
    let compid = null; // Declare compid globally
    let allApplications = []; // Store all applications for filtering

    $(document).ready(function () {
        function getUserIdFromToken() {
            const token = localStorage.getItem("token");
            if (!token) return null;

            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return payload.uid;
            } catch (e) {
                console.error("Error decoding token:", e);
                return null;
            }
        }

        const userId = getUserIdFromToken();

        $.ajax({
            url: `http://localhost:5086/api/CompanyApi/getCompanyId/${userId}`,
            type: "GET",
            success: function (response) {
                console.log("Company ID:", response);

                if (!response || response === 0) {
                    setTimeout(() => {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Company Not Registered',
                            text: 'You have not registered your company. Please complete the registration process.',
                            confirmButtonColor: '#4361ee'
                        }).then(() => {
                            window.location = '../RecruiterDashboard/CompanyRegistration';
                        });
                    }, 500);
                    return;
                }

                // Check if the company is approved
                $.ajax({
                    url: `http://localhost:5086/api/CompanyApi/getCompanyStatus/${response}`,
                    type: "GET",
                    success: function (isApproved) {
                        if (!isApproved) {
                            setTimeout(() => {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Company Not Approved',
                                    text: 'Your company registration is pending approval. Please wait for approval.',
                                    confirmButtonColor: '#4361ee'
                                }).then(() => {
                                    setTimeout(() => {
                                        window.location = '../RecruiterDashboard/Index';
                                    }, 500);
                                });
                            }, 500);
                            return;
                        }

                        // Company is registered and approved
                        compid = response;
                        fetchApplications(compid); // Continue with your logic
                    },
                    error: function (xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to verify company approval status. Please try again later.',
                            confirmButtonColor: '#4361ee'
                        });
                        console.error("Company Approval Error:", xhr.status, xhr.statusText);
                    }
                });
            },
            error: function (xhr, status, error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to fetch company information. Please try again later.',
                    confirmButtonColor: '#4361ee'
                });
                console.error("Company ID Error:", xhr.status, xhr.statusText);
            }
        });

        // Set up filter event listeners
        $("#jobTitleFilter, #statusFilter, #dateFilter").on("change", function() {
            filterApplications();
        });

        $("#searchFilter").on("keyup", function() {
            filterApplications();
        });
    });

    function fetchApplications(companyId) {
        $.ajax({
            url: `http://localhost:5086/api/ApplyJob/GetHiredCandidates/${companyId}`,
            method: "GET",
            success: function (response) {
                console.log(response);
                allApplications = response; // Store all applications
                
                updateDashboardStats(response);
                populateJobTitleFilter(response);
                renderApplications(response);
                
                // Initialize DataTable after data is loaded
                if (!$.fn.DataTable.isDataTable('#applicationsTable')) {
                    $('#applicationsTable').DataTable({
                        paging: true,
                        searching: false, // We're using our own search
                        ordering: true,
                        info: true,
                        language: {
                            paginate: {
                                previous: '<i class="fas fa-chevron-left"></i>',
                                next: '<i class="fas fa-chevron-right"></i>'
                            }
                        },
                        responsive: true
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error("Error fetching applications:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to fetch hired candidates. Please try again later.',
                    confirmButtonColor: '#4361ee'
                });
            },
        });
    }

    function updateDashboardStats(applications) {
        const total = applications.length;
        
        // Count this month's hires
        const now = new Date();
        const thisMonth = now.getMonth();
        const thisYear = now.getFullYear();
        const thisMonthHires = applications.filter(app => {
            if (!app.c_hireDate) return false;
            const hireDate = new Date(app.c_hireDate);
            return hireDate.getMonth() === thisMonth && hireDate.getFullYear() === thisYear;
        }).length;
        
        // Count pending onboarding (assuming this status exists in your data)
        const pendingOnboarding = applications.filter(app => 
            app.c_status === "Pending Onboarding").length;
        
        // This is a placeholder - you would need to fetch actual open positions
        const openPositions = Math.max(5, Math.floor(total * 0.3)); // Placeholder calculation
        
        // Update the stats in the UI
        $("#totalHired").text(total);
        $("#thisMonth").text(thisMonthHires);
        $("#pendingOnboarding").text(pendingOnboarding);
        $("#openPositions").text(openPositions);
    }

    function populateJobTitleFilter(applications) {
        const jobTitleFilter = $("#jobTitleFilter");
        jobTitleFilter.empty();
        jobTitleFilter.append('<option value="">All Job Titles</option>');
        
        // Extract unique job titles
        const jobTitles = [...new Set(applications.map(app => app.job_Post.c_job_title))];
        
        // Add each job title as an option
        jobTitles.forEach(title => {
            jobTitleFilter.append(`<option value="${title}">${title}</option>`);
        });
    }

    function renderApplications(applications) {
        const tableBody = $("#applicationsTableBody");
        tableBody.empty();
        
        // Show loading state
        $("#tableLoading").removeClass("d-none");
        
        applications.forEach(app => {
            // Format hire date if it exists
            const hireDate = app.c_hireDate 
                ? new Date(app.c_hireDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                }) 
                : 'Not specified';
            
            const row = `
                <tr data-job-title="${app.job_Post.c_job_title}" data-status="${app.c_status}">
                    <td>
                        <div class="d-flex flex-column">
                            <span class="fw-medium">${app.job_Post.c_job_title}</span>
                            <small class="text-muted">${app.job_Post.c_job_location || 'Remote'}</small>
                        </div>
                    </td>
                    <td>
                        <div class="profile-column">
                            <img src="${app.user.c_profileImage || 'https://via.placeholder.com/150'}" alt="Profile">
                            <div class="profile-details">
                                <span class="profile-name">${app.user.c_fullName}</span>
                                <span class="profile-email">${app.user.Email}</span>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex flex-column">
                            <span>${app.user.c_phoneNumber || 'N/A'}</span>
                            <a href="mailto:${app.user.Email}" class="text-primary small">Send Email</a>
                        </div>
                    </td>
                     <td>${formatDate(app.c_hired_date)}</td>
                    <td>
                        <span class="status-badge hired">
                            <i class="fas fa-check-circle me-1"></i> ${app.c_status}
                        </span>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="action-btn chat-btn" title="Chat with candidate" data-id="${app.Id}">
                                <i class="fas fa-comment-alt"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
            tableBody.append(row);
        });

        // Hide loading state
        $("#tableLoading").addClass("d-none");
        
        // Set up button event handlers
        $(".chat-btn").on("click", function() {
            const appId = $(this).data("id");
            // Implement chat functionality here
            console.log("Chat with candidate ID:", appId);
        });

        $(".view-btn").on("click", function() {
            const appId = $(this).data("id");
            // Implement view details functionality here
            console.log("View details for ID:", appId);
        });

        $(".download-btn").on("click", function() {
            const appId = $(this).data("id");
            // Implement download CV functionality here
            console.log("Download CV for ID:", appId);
        });
    }

    function filterApplications() {
        const jobTitleFilter = $("#jobTitleFilter").val();
        const statusFilter = $("#statusFilter").val();
        const dateFilter = $("#dateFilter").val();
        const searchFilter = $("#searchFilter").val().toLowerCase();
        
        // Get current date for date filtering
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const weekStart = new Date(today);
        weekStart.setDate(today.getDate() - today.getDay());
        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
        const quarterStart = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);
        
        // Filter applications based on selected criteria
        const filtered = allApplications.filter(app => {
            // Job title filter
            if (jobTitleFilter && app.job_Post.c_job_title !== jobTitleFilter) return false;
            
            // Status filter
            if (statusFilter && app.c_status !== statusFilter) return false;
            
            // Date filter
            if (dateFilter && app.c_hireDate) {
                const hireDate = new Date(app.c_hireDate);
                if (dateFilter === 'today' && hireDate < today) return false;
                if (dateFilter === 'week' && hireDate < weekStart) return false;
                if (dateFilter === 'month' && hireDate < monthStart) return false;
                if (dateFilter === 'quarter' && hireDate < quarterStart) return false;
            }
            
            // Search filter
            if (searchFilter) {
                const fullName = app.user.c_fullName.toLowerCase();
                const email = app.user.Email.toLowerCase();
                const jobTitle = app.job_Post.c_job_title.toLowerCase();
                
                if (!fullName.includes(searchFilter) && 
                    !email.includes(searchFilter) && 
                    !jobTitle.includes(searchFilter)) {
                    return false;
                }
            }
            
            return true;
        });
        
        // Update the UI with filtered results
        renderApplications(filtered);
    }
    function formatDate(dateString) {
    if (!dateString) return 'N/A';

    // Manually parse "dd-MM-yyyy HH:mm:ss"
    const parts = dateString.split(' ')[0].split('-');
    if (parts.length === 3) {
        const day = parts[0];
        const month = parts[1];
        const year = parts[2];
        return `${day}/${month}/${year}`;
    }

    return dateString;
}
</script>

@section Scripts {
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
}