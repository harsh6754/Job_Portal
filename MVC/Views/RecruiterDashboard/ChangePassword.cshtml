@* @{
    const role = getUserRoleFromToken();
    if (role == "Recruiter")
    {
        Layout = "~/Views/Shared/_RecruiterLayout.cshtml";
    }
    else if (role == "Admin")
    {
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_NewLayout.cshtml";
    }
} *@

@{
    Layout = "~/Views/Shared/_RecruiterLayout.cshtml";
}

<!-- External Scripts & Styles -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

<!-- Styles -->
<style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --light-color: #f8f9fa;
        --dark-color: #212529;
        --success-color: #4bb543;
        --border-radius: 12px;
        --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    .password-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .password-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: hidden;
        transition: var(--transition);
        border: none;
    }

    .password-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 2rem;
        text-align: center;
    }

    .password-title {
        font-weight: 700;
        font-size: 2rem;
        margin: 0;
    }

    .password-body {
        padding: 2rem;
    }

    .form-label {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-control {
        border: 2px solid #e9ecef;
        border-radius: var(--border-radius);
        padding: 0.75rem 1rem;
        font-size: 1rem;
        transition: var(--transition);
        height: auto;
    }

    .form-control:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 0.25rem rgba(72, 149, 239, 0.25);
    }

    .input-group {
        position: relative;
    }

    .input-group-text {
        background-color: #e9ecef;
        border: 2px solid #e9ecef;
        border-right: none;
        border-radius: var(--border-radius) 0 0 var(--border-radius);
        padding: 0.75rem 1rem;
        font-size: 1rem;
        color: #495057;
    }

    .form-control.password-input {
        border-left: none;
        padding-right: 40px;
    }

    .toggle-password {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        z-index: 10;
        color: #999;
    }

    .toggle-password:hover {
        color: var(--primary-color);
    }

    .btn-primary {
        background: var(--primary-color);
        border: none;
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: var(--border-radius);
        width: 100%;
        transition: var(--transition);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .btn-primary:hover {
        background: var(--secondary-color);
        transform: translateY(-2px);
    }

    .btn-cancel {
        background: #f5f5f5;
        border: 1px solid darkgray;
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: var(--border-radius);
        width: 100%;
        transition: var(--transition);
        text-transform: uppercase;
        letter-spacing: 1px;
        color: #424242;
    }

    .btn-cancel:hover {
        background-color: #a29b9b;
        transform: translateY(-2px);
    }

    .password-strength {
        height: 5px;
        margin-top: 5px;
        background: #e0e0e0;
        border-radius: 5px;
        transition: width 0.3s ease;
    }

    .error {
        color: #dc3545 !important;
        font-size: 12px;
        margin-top: 0.25rem;
        display: block;
    }

    .form-control.password-input:valid,
    .form-control.password-input:invalid {
        background-image: none;
        padding-right: 40px;
    }

    #password-criteria.invalid {
        color: #dc3545;
    }

    @@media (max-width: 768px) {
        .password-container {
            padding: 0 0.5rem;
        }

        .password-header {
            padding: 1.5rem;
        }

        .password-title {
            font-size: 1.5rem;
        }

        .password-body {
            padding: 1.5rem;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .password-card {
        animation: fadeIn 0.5s ease-out;
    }

    .swal2-confirm {
        background-color: var(--primary-color) !important;
        transition: var(--transition) !important;
    }

    .swal2-confirm:hover {
        background-color: var(--secondary-color) !important;
    }
</style>

<!-- UI -->
<div class="password-container">
    <div class="password-card">
        <div class="password-header">
            <h1 class="password-title">Change Password</h1>
        </div>
        <div class="password-body">
            <form id="resetPasswordForm">
                <!-- Old Password -->
                <div class="mb-4">
                    <label for="oldPassword" class="form-label">Old Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input type="password" class="form-control password-input" id="oldPassword" name="oldPassword"
                            placeholder="Enter Old Password" required>
                        <span class="toggle-password" toggle="#oldPassword"><i class="fas fa-eye-slash"></i></span>
                    </div>
                    <div id="oldPasswordError" class="error" style="display: none;"></div>
                </div>

                <!-- New Password -->
                <div class="mb-4">
                    <label for="newPassword" class="form-label">New Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input type="password" class="form-control password-input" id="newPassword" name="newPassword"
                            placeholder="Enter New Password" required>
                        <span class="toggle-password" toggle="#newPassword"><i class="fas fa-eye-slash"></i></span>
                    </div>
                    <div class="password-strength" id="password-strength"></div>
                    <div id="password-criteria" style="font-size: 13px; margin-top: 8px;"></div>
                </div>

                <!-- Confirm Password -->
                <div class="mb-4">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input type="password" class="form-control password-input" id="confirmPassword"
                            name="confirmPassword" placeholder="Confirm New Password" required>
                        <span class="toggle-password" toggle="#confirmPassword"><i class="fas fa-eye-slash"></i></span>
                    </div>
                </div>

                <!-- Buttons -->
                <button type="submit" class="btn btn-primary mt-3">
                    <i class="fas fa-save me-2"></i> Change Password
                </button>
                <button type="button" class="btn btn-cancel mt-2"
                    onclick="window.location.href='/RecruiterDashboard/Profile'">
                    <i class="fa-solid fa-circle-xmark me-2"></i> Cancel
                </button>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    $(document).ready(function () {
        // Function to decode JWT and extract user ID
        function getUserIdFromToken() {
            let token = localStorage.getItem("token");
            if (!token) {
                console.error("No token found in localStorage");
                return null;
            }
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                return payload.uid || payload.userId || null;
            } catch (e) {
                console.error("Error decoding token:", e);
                return null;
            }
        }

        // Function to decode JWT and extract user role
        function getUserRoleFromToken() {
            let token = localStorage.getItem("token");
            if (!token) {
                console.error("No token found in localStorage");
                return null;
            }
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                // Adjust the role key based on your JWT payload structure
                // Common variations: 'role', 'roles', 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role'
                return payload.role || payload.roles || payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || null;
            } catch (e) {
                console.error("Error decoding token for role:", e);
                return null;
            }
        }

        // Function to decode JWT and extract email
        function getEmailFromToken() {
            let token = localStorage.getItem("token");
            if (!token) {
                console.error("No token found in localStorage");
                return null;
            }
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                return payload.email || payload.sub || null;
            } catch (e) {
                console.error("Error decoding token for email:", e);
                return null;
            }
        }

        // Role-based redirection function
        function roleBasedReturn() {

            console.log("User role:", role); // Debugging

            // Normalize role to handle case sensitivity or unexpected formats
            if (!role) {
                console.warn("No role found, redirecting to default page");
                Swal.fire({
                    icon: 'error',
                    title: 'Authentication Error',
                    text: 'User role not found. Redirecting to login.',
                    confirmButtonColor: '#4361ee'
                }).then(() => {
                    window.location.href = '/login';
                });
                return;
            }

            const normalizedRole = role.toLowerCase();
            console.log("Normalized role:", normalizedRole); // Debugging

            if (normalizedRole.includes('candidate')) {
                window.location.href = '/UserDetails/PersonalInfo';
            } else if (normalizedRole.includes('recruiter')) {
                window.location.href = '/RecruiterDashboard/Profile';
            } else if (normalizedRole.includes('admin')) {
                window.location.href = '/adminDashboard/Profile';
            } else {
                console.warn("Unrecognized role, redirecting to default page");
                Swal.fire({
                    icon: 'warning',
                    title: 'Unknown Role',
                    text: 'Unrecognized user role. Redirecting to login.',
                    confirmButtonColor: '#4361ee'
                }).then(() => {
                    window.location.href = '/login';
                });
            }
        }

        // Check old password validity
        var userId = getUserIdFromToken();
        let oldPasswordValid = false;

        function showOldPasswordError(message) {
            const $errorDiv = $('#oldPasswordError');
            $errorDiv.text(message).show();
            $('#oldPassword').addClass('is-invalid').removeClass('is-valid');
        }

        function clearOldPasswordError() {
            const $errorDiv = $('#oldPasswordError');
            $errorDiv.text('').hide();
            $('#oldPassword').removeClass('is-invalid');
        }

        $('#oldPassword').on('blur', function () {
            const oldPassword = $(this).val();

            // Clear any existing errors
            clearOldPasswordError();

            // Step 1: Check if empty
            if (!oldPassword) {
                showOldPasswordError('Old password is required.');
                oldPasswordValid = false;
                return;
            }

            // Step 2: Check length
            if (oldPassword.length < 6) {
                showOldPasswordError('Old password must be at least 6 characters.');
                oldPasswordValid = false;
                return;
            }

            // Step 3: Check from server
            $.ajax({
                url: 'http://localhost:5086/api/AuthApi/CheckOldPassword',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ oldPassword: oldPassword, userId: userId }),
                success: function (data) {
                    if (data.isValid) {
                        oldPasswordValid = true;
                        $('#oldPassword').addClass('is-valid').removeClass('is-invalid');
                        clearOldPasswordError();
                    } else {
                        oldPasswordValid = false;
                        showOldPasswordError('Old password is incorrect.');
                    }
                },
                error: function () {
                    oldPasswordValid = false;
                    showOldPasswordError('Server error while checking password.');
                }
            });
        });

        // Show/Hide Password Toggle
        $(document).on('click', '.toggle-password', function () {
            var input = $($(this).attr("toggle"));
            var icon = $(this).find("i");

            if (input.attr("type") === "password") {
                input.attr("type", "text");
                icon.removeClass("fa-eye-slash").addClass("fa-eye");
            } else {
                input.attr("type", "password");
                icon.removeClass("fa-eye").addClass("fa-eye-slash");
            }
        });

        // Password Strength Check for New Password
        function checkPasswordStrength(password) {
            let strength = 0;
            let criteria = [];

            if (password.length >= 6) strength++;
            else criteria.push("at least 6 characters");

            if (/[A-Z]/.test(password)) strength++;
            else criteria.push("at least 1 uppercase letter");

            if (/[a-z]/.test(password)) strength++;
            else criteria.push("at least 1 lowercase letter");

            if (/[0-9]/.test(password)) strength++;
            else criteria.push("at least 1 digit");

            if (/[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) strength++;
            else criteria.push("at least 1 special character");

            return { strength: strength, criteria: criteria };
        }

        function updateStrengthIndicator(strength, criteria) {
            const $indicator = $("#password-strength");
            const $criteria = $("#password-criteria");
            let width = "0%";
            let background = "transparent";

            switch (strength) {
                case 1:
                    width = "20%";
                    background = "red";
                    break;
                case 2:
                    width = "40%";
                    background = "orange";
                    break;
                case 3:
                    width = "60%";
                    background = "#ffcc00";
                    break;
                case 4:
                    width = "80%";
                    background = "green";
                    break;
                case 5:
                    width = "100%";
                    background = "darkgreen";
                    break;
                default:
                    width = "0%";
                    background = "transparent";
            }

            $indicator.css({
                "width": width,
                "background": background
            });

            $criteria.html(criteria.join(", "));
            if (strength < 5) {
                $criteria.addClass("invalid");
            } else {
                $criteria.removeClass("invalid");
            }
        }

        $("#newPassword").on("keyup", function () {
            const password = $(this).val();
            const { strength, criteria } = checkPasswordStrength(password);
            updateStrengthIndicator(strength, criteria);
        });

        // Validation & Submit Logic
        $("#resetPasswordForm").validate({
            rules: {
                oldPassword: {
                    required: true,
                    minlength: 6
                },
                confirmPassword: {
                    required: true,
                    equalTo: "#newPassword"
                }
            },
            messages: {
                oldPassword: {
                    required: "", // Suppress jQuery Validate's default message
                    minlength: "" // Suppress jQuery Validate's default message
                },
                confirmPassword: {
                    required: "Please confirm your new password.",
                    equalTo: "Passwords do not match."
                }
            },
            errorPlacement: function (error, element) {
                if (element.attr("name") === "oldPassword") {
                    // Skip jQuery Validate error placement for oldPassword
                    return;
                }
                error.addClass("error");
                error.insertAfter(element.closest(".input-group"));
            },
            highlight: function (element) {
                $(element).addClass("is-invalid").removeClass("is-valid");
            },
            unhighlight: function (element) {
                if (element.name !== "oldPassword") {
                    $(element).removeClass("is-invalid");
                }
            },
            submitHandler: function (form) {
                var email = getEmailFromToken();
                if (!email) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Authentication Error',
                        text: 'Unable to retrieve user email. Please log in again.',
                        confirmButtonColor: '#4361ee'
                    }).then(() => {
                        window.location.href = '/login';
                    });
                    return;
                }

                if (!oldPasswordValid) {
                    showOldPasswordError('Old password is incorrect.');
                    return;
                }

                // Check new password strength
                const newPassword = $('#newPassword').val();
                const { strength, criteria } = checkPasswordStrength(newPassword);
                if (strength < 5) {
                    Swal.fire({
                        title: "Invalid Password",
                        text: 'New password must meet all criteria: ' + criteria.join(', '),
                        icon: "error",
                        confirmButtonColor: '#4361ee'
                    });
                    return;
                }

                let formData = new FormData();
                formData.append("Email", email);
                formData.append("NewPassword", newPassword);

                $.ajax({
                    url: 'http://localhost:5086/api/AuthApi/ResetPassword',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        if (data.success) {
                            Swal.fire({
                                title: "Success!",
                                text: "Your password has been changed successfully.",
                                icon: "success",
                                confirmButtonColor: '#4361ee'
                            }).then(() => {
                                window.location.href = "/RecruiterDashboard/Profile";
                                @* roleBasedReturn(); // Use roleBasedReturn for redirection *@
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: data.message || "Password reset failed.",
                                confirmButtonColor: '#4361ee'
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Server error occurred. Please try again.",
                            confirmButtonColor: '#4361ee'
                        });
                    }
                });
            }
        });
    });
</script>