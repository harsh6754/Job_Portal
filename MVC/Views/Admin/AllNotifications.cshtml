@{
    ViewData["Title"] = "All Notifications";
    Layout = "_AdminLayout";
}

<style>
    .table-hover tbody tr:hover {
        background-color: rgba(67, 97, 238, 0.05);
        transform: none !important;
    }

    .table td {
        max-width: 300px;
        white-space: normal;
        word-wrap: break-word;
    }

    .table th {
        background-color: #f8fafc;
        position: sticky;
        top: 0;
    }

    .notification-message {
        max-width: 300px;
        white-space: normal;
        word-wrap: break-word;
    }

    .table-responsive {
        max-height: calc(100vh - 200px);
        overflow-y: auto;
    }

    .notification-type {
        text-transform: capitalize;
    }
</style>

<div class="container mt-5">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">All Notifications</h5>
            <div>
                <button id="deleteSelectedNotifications" class="btn btn-danger btn-sm">
                    <i class="fas fa-trash"></i> Delete Selected
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th style="width: 50px;">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAllNotifications">
                                </div>
                            </th>
                            <th>Message</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody id="notificationsTableBody">
                        <!-- Notifications will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Function to format date
            function formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleString();
            }

            // Function to format notification type
            function formatNotificationType(type) {
                switch (type) {
                    case 'job_posted':
                        return 'Job Posted';
                    case 'job_update':
                        return 'Job Updated';
                    default:
                        return type.split('_').map(word =>
                            word.charAt(0).toUpperCase() + word.slice(1)
                        ).join(' ');
                }
            }

            // Function to load all notifications
            async function loadAllNotifications() {
                try {
                    const response = await fetch('http://localhost:5086/api/AdminApi/all-notifications');
                    const notifications = await response.json();
                    const tableBody = $("#notificationsTableBody");
                    tableBody.empty();

                    notifications.forEach(notification => {
                        const row = `
                                    <tr>
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input notification-checkbox" type="checkbox" value="${notification.notificationId}">
                                            </div>
                                        </td>
                                        <td class="notification-message">${notification.message}</td>
                                        <td class="notification-type">${formatNotificationType(notification.type)}</td>
                                        <td>
                                            <span class="badge ${notification.isRead ? 'bg-success' : 'bg-warning'}">
                                                ${notification.isRead ? 'Read' : 'Unread'}
                                            </span>
                                        </td>
                                        <td>${formatDate(notification.createdAt)}</td>
                                    </tr>
                                `;
                        tableBody.append(row);
                    });
                } catch (error) {
                    console.error('Error loading notifications:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to load notifications',
                        icon: 'error',
                        confirmButtonColor: '#4361ee',
                    });
                }
            }

            // Select all checkbox functionality
            $("#selectAllNotifications").change(function () {
                $(".notification-checkbox").prop('checked', $(this).prop('checked'));
            });

            // Function to handle notification selection and deletion
            async function handleNotificationSelection() {
                const selectedNotifications = [];
                $(".notification-checkbox:checked").each(function () {
                    selectedNotifications.push(parseInt($(this).val()));
                });

                if (selectedNotifications.length === 0) {
                    Swal.fire({
                        title: 'No Selection',
                        text: 'Please select at least one notification to delete',
                        icon: 'warning',
                        confirmButtonColor: '#4361ee',
                    });
                    return;
                }

                Swal.fire({
                    title: 'Delete Notifications?',
                    text: `Are you sure you want to delete ${selectedNotifications.length} notification(s)?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#4361ee',
                    cancelButtonColor: '#64748b',
                    confirmButtonText: 'Yes, delete them'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            const response = await fetch('http://localhost:5086/api/AdminApi/delete-notifications', {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(selectedNotifications)
                            });

                            const data = await response.json();

                            if (response.ok) {
                                Swal.fire(
                                    'Deleted!',
                                    data.message,
                                    'success'
                                ).then(() => {
                                    loadAllNotifications();
                                });
                            } else {
                                throw new Error(data.message);
                            }
                        } catch (error) {
                            Swal.fire(
                                'Error!',
                                error.message,
                                'error'
                            );
                        }
                    }

                });
            }

            // Add event listener for delete button
            $("#deleteSelectedNotifications").click(handleNotificationSelection);

            // Initial load
            loadAllNotifications();
        });
    </script>
}