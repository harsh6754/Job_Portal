@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Change Password";
}

<!-- External Scripts & Styles -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

<!-- Styles -->
<style>
    :root {
        --primary-color: #3b82f6;
        --primary-dark: #1d4ed8;
        --primary-light: #eff6ff;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-400: #9ca3af;
        --gray-500: #6b7280;
        --gray-600: #4b5563;
        --gray-700: #374151;
        --gray-800: #1f2937;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --border-radius: 0.5rem;
    }

    .admin-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .page-title {
        font-size: 1.25rem;
        color: var(--gray-700);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .page-title i {
        color: var(--primary-color);
    }

    .security-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-lg);
        overflow: hidden;
        border: 1px solid var(--gray-200);
    }

    .card-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--gray-200);
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .shield-icon {
        background: var(--primary-light);
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--primary-color);
        font-size: 1.25rem;
    }

    .header-text h1 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--gray-800);
    }

    .header-text p {
        margin: 0.25rem 0 0;
        color: var(--gray-500);
        font-size: 0.875rem;
    }

    .card-body {
        padding: 1.5rem;
    }

    .form-section {
        margin-bottom: 1.5rem;
    }

    .section-title {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--gray-700);
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .password-field {
        margin-bottom: 1.5rem;
    }

    .field-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--gray-700);
        margin-bottom: 0.5rem;
        display: block;
    }

    .password-input-group {
        position: relative;
        display: flex;
        border-radius: var(--border-radius);
        border: 1px solid var(--gray-300);
        transition: all 0.2s;
        background: white;
    }

    .password-input-group:focus-within {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }

    .password-input-group.is-invalid {
        border-color: var(--danger-color);
    }

    .password-input-group.is-valid {
        border-color: var(--success-color);
    }

    .input-icon {
        display: flex;
        align-items: center;
        padding: 0 0.75rem;
        color: var(--gray-500);
    }

    .password-input {
        flex: 1;
        border: none;
        padding: 0.75rem 0;
        font-size: 0.9375rem;
        background: transparent;
        outline: none;
    }

    .password-input::placeholder {
        color: var(--gray-400);
    }

    .toggle-password {
        padding: 0 0.75rem;
        display: flex;
        align-items: center;
        color: var(--gray-500);
        cursor: pointer;
        transition: color 0.2s;
    }

    .toggle-password:hover {
        color: var(--primary-color);
    }

    .password-strength-container {
        margin-top: 0.5rem;
    }

    .password-strength-bar {
        height: 4px;
        background: var(--gray-200);
        border-radius: 2px;
        overflow: hidden;
    }

    .password-strength-progress {
        height: 100%;
        width: 0;
        transition: width 0.3s, background-color 0.3s;
    }

    .password-criteria {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.75rem;
    }

    .criteria-item {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 1rem;
        background: var(--gray-100);
        color: var(--gray-600);
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .criteria-item.valid {
        background: rgba(16, 185, 129, 0.1);
        color: var(--success-color);
    }

    .error-message {
        color: var(--danger-color);
        font-size: 0.75rem;
        margin-top: 0.5rem;
    }

    .btn-container {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border-radius: var(--border-radius);
        font-weight: 500;
        font-size: 0.9375rem;
        transition: all 0.2s;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
        flex: 1;
    }

    .btn-primary:hover {
        background: var(--primary-dark);
    }

    .btn-secondary {
        background: var(--gray-100);
        color: var(--gray-700);
    }

    .btn-secondary:hover {
        background: var(--gray-200);
    }

    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
        }
    }

    .pulse-animation {
        animation: pulse 1.5s infinite;
    }
</style>

<div class="admin-container">
    <h2 class="page-title">
        <i class="fas fa-shield-alt"></i>
        Security Settings
    </h2>

    <div class="security-card">
        <div class="card-header">
            <div class="shield-icon">
                <i class="fas fa-lock"></i>
            </div>
            <div class="header-text">
                <h1>Change Password</h1>
                <p>Update your password to keep your account secure</p>
            </div>
        </div>

        <div class="card-body">
            <form id="passwordChangeForm">
                <!-- Current Password Section -->
                <div class="form-section">
                    <h3 class="section-title">Current Credentials</h3>
                    
                    <div class="password-field">
                        <label for="oldPassword" class="field-label">Current Password</label>
                        <div class="password-input-group" id="oldPasswordGroup">
                            <span class="input-icon">
                                <i class="fas fa-key"></i>
                            </span>
                            <input type="password" id="oldPassword" name="oldPassword" 
                                   class="password-input" placeholder="Enter your current password" required>
                            <span class="toggle-password" toggle="#oldPassword">
                                <i class="fas fa-eye-slash"></i>
                            </span>
                        </div>
                        <div id="oldPasswordError" class="error-message" style="display: none;"></div>
                    </div>
                </div>

                <!-- New Password Section -->
                <div class="form-section">
                    <h3 class="section-title">New Credentials</h3>
                    
                    <div class="password-field">
                        <label for="newPassword" class="field-label">New Password</label>
                        <div class="password-input-group" id="newPasswordGroup">
                            <span class="input-icon">
                                <i class="fas fa-lock"></i>
                            </span>
                            <input type="password" id="newPassword" name="newPassword" 
                                   class="password-input" placeholder="Create a strong password" required>
                            <span class="toggle-password" toggle="#newPassword">
                                <i class="fas fa-eye-slash"></i>
                            </span>
                        </div>
                        
                        <div class="password-strength-container">
                            <div class="password-strength-bar">
                                <div class="password-strength-progress" id="passwordStrengthBar"></div>
                            </div>
                            <div class="password-criteria" id="passwordCriteria">
                                <span class="criteria-item" data-criteria="length">
                                    <i class="fas fa-circle"></i> 6+ characters
                                </span>
                                <span class="criteria-item" data-criteria="uppercase">
                                    <i class="fas fa-circle"></i> Uppercase
                                </span>
                                <span class="criteria-item" data-criteria="lowercase">
                                    <i class="fas fa-circle"></i> Lowercase
                                </span>
                                <span class="criteria-item" data-criteria="number">
                                    <i class="fas fa-circle"></i> Number
                                </span>
                                <span class="criteria-item" data-criteria="special">
                                    <i class="fas fa-circle"></i> Symbol
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="password-field">
                        <label for="confirmPassword" class="field-label">Confirm Password</label>
                        <div class="password-input-group" id="confirmPasswordGroup">
                            <span class="input-icon">
                                <i class="fas fa-lock-open"></i>
                            </span>
                            <input type="password" id="confirmPassword" name="confirmPassword" 
                                   class="password-input" placeholder="Confirm your new password" required>
                            <span class="toggle-password" toggle="#confirmPassword">
                                <i class="fas fa-eye-slash"></i>
                            </span>
                        </div>
                        <div id="confirmPasswordError" class="error-message" style="display: none;"></div>
                    </div>
                </div>

                <div class="btn-container">
                    <button type="button" class="btn btn-secondary" onclick="window.location.href='/Admin/Index'">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-check"></i>
                        Update Password
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    $(document).ready(function () {
        // Function to decode JWT and extract user ID
        function getUserIdFromToken() {
            let token = localStorage.getItem("token");
            if (!token) {
                console.error("No token found in localStorage");
                return null;
            }
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                return payload.uid || payload.userId || null;
            } catch (e) {
                console.error("Error decoding token:", e);
                return null;
            }
        }

        // Function to decode JWT and extract email
        function getEmailFromToken() {
            let token = localStorage.getItem("token");
            if (!token) {
                console.error("No token found in localStorage");
                return null;
            }
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                return payload.email || payload.sub || null;
            } catch (e) {
                console.error("Error decoding token for email:", e);
                return null;
            }
        }

        // Toggle password visibility
        $(document).on('click', '.toggle-password', function () {
            const input = $($(this).attr("toggle"));
            const icon = $(this).find("i");

            if (input.attr("type") === "password") {
                input.attr("type", "text");
                icon.removeClass("fa-eye-slash").addClass("fa-eye");
            } else {
                input.attr("type", "password");
                icon.removeClass("fa-eye").addClass("fa-eye-slash");
            }
        });

        // Check old password validity
        var userId = getUserIdFromToken();
        let oldPasswordValid = false;

        function showOldPasswordError(message) {
            $('#oldPasswordError').text(message).show();
            $('#oldPasswordGroup').addClass('is-invalid').removeClass('is-valid');
        }

        function clearOldPasswordError() {
            $('#oldPasswordError').text('').hide();
            $('#oldPasswordGroup').removeClass('is-invalid');
        }

        $('#oldPassword').on('blur', function () {
            const oldPassword = $(this).val();
            clearOldPasswordError();

            if (!oldPassword) {
                showOldPasswordError('Current password is required');
                oldPasswordValid = false;
                return;
            }

            if (oldPassword.length < 6) {
                showOldPasswordError('Password must be at least 6 characters');
                oldPasswordValid = false;
                return;
            }

            // Check against server
            $.ajax({
                url: 'http://localhost:5086/api/AuthApi/CheckOldPassword',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ oldPassword: oldPassword, userId: userId }),
                success: function (data) {
                    if (data.isValid) {
                        oldPasswordValid = true;
                        $('#oldPasswordGroup').addClass('is-valid').removeClass('is-invalid');
                        clearOldPasswordError();
                    } else {
                        oldPasswordValid = false;
                        showOldPasswordError('Current password is incorrect');
                    }
                },
                error: function () {
                    oldPasswordValid = false;
                    showOldPasswordError('Error verifying password');
                }
            });
        });

        // Password Strength Checker with visual indicators
        const criteriaMap = {
            'length': password => password.length >= 6,
            'uppercase': password => /[A-Z]/.test(password),
            'lowercase': password => /[a-z]/.test(password),
            'number': password => /[0-9]/.test(password),
            'special': password => /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
        };

        function updatePasswordStrength(password) {
            // Calculate met criteria count
            let metCount = 0;
            let totalCriteria = Object.keys(criteriaMap).length;
            
            // Update each criteria item
            for (const [criteria, checkFn] of Object.entries(criteriaMap)) {
                const $criteriaItem = $(`.criteria-item[data-criteria="${criteria}"]`);
                const isMet = checkFn(password);
                
                if (isMet) {
                    $criteriaItem.addClass('valid');
                    $criteriaItem.find('i').removeClass('fa-circle').addClass('fa-check-circle');
                    metCount++;
                } else {
                    $criteriaItem.removeClass('valid');
                    $criteriaItem.find('i').removeClass('fa-check-circle').addClass('fa-circle');
                }
            }
            
            // Update strength bar
            const strengthPercentage = (metCount / totalCriteria) * 100;
            const $bar = $('#passwordStrengthBar');
            
            $bar.css('width', `${strengthPercentage}%`);
            
            // Set color based on strength
            if (strengthPercentage <= 20) {
                $bar.css('background-color', '#ef4444'); // Red
            } else if (strengthPercentage <= 40) {
                $bar.css('background-color', '#f59e0b'); // Amber
            } else if (strengthPercentage <= 60) {
                $bar.css('background-color', '#f59e0b'); // Orange
            } else if (strengthPercentage <= 80) {
                $bar.css('background-color', '#a3e635'); // Lime
            } else {
                $bar.css('background-color', '#10b981'); // Green
                if (password.length >= 6) {
                    $('#newPasswordGroup').addClass('is-valid');
                }
            }
            
            // Return the number of criteria met for validation
            return metCount;
        }

        // Update password strength in real-time
        $('#newPassword').on('input', function() {
            const password = $(this).val();
            updatePasswordStrength(password);
            
            // Check for password match on every input
            const confirmPassword = $('#confirmPassword').val();
            if (confirmPassword && confirmPassword === password) {
                $('#confirmPasswordGroup').addClass('is-valid').removeClass('is-invalid');
                $('#confirmPasswordError').hide();
            } else if (confirmPassword) {
                $('#confirmPasswordGroup').addClass('is-invalid').removeClass('is-valid');
                $('#confirmPasswordError').text('Passwords do not match').show();
            }
        });
        
        // Check password match
        $('#confirmPassword').on('input', function() {
            const confirmPassword = $(this).val();
            const password = $('#newPassword').val();
            
            if (!confirmPassword) {
                $('#confirmPasswordGroup').removeClass('is-valid is-invalid');
                $('#confirmPasswordError').hide();
            } else if (confirmPassword === password) {
                $('#confirmPasswordGroup').addClass('is-valid').removeClass('is-invalid');
                $('#confirmPasswordError').hide();
            } else {
                $('#confirmPasswordGroup').addClass('is-invalid').removeClass('is-valid');
                $('#confirmPasswordError').text('Passwords do not match').show();
            }
        });

        // Form submission
        $('#passwordChangeForm').on('submit', function(e) {
            e.preventDefault();
            
            // Validate old password
            if (!oldPasswordValid) {
                showOldPasswordError('Please verify your current password');
                $('#oldPassword').focus();
                return false;
            }
            
            // Validate new password
            const newPassword = $('#newPassword').val();
            const metCriteria = updatePasswordStrength(newPassword);
            
            if (metCriteria < 5) {
                $('#newPasswordGroup').addClass('is-invalid').removeClass('is-valid');
                Swal.fire({
                    title: "Weak Password",
                    text: "Please ensure your password meets all security requirements",
                    icon: "warning",
                    confirmButtonColor: '#3b82f6'
                });
                return false;
            }
            
            // Validate password match
            const confirmPassword = $('#confirmPassword').val();
            if (newPassword !== confirmPassword) {
                $('#confirmPasswordGroup').addClass('is-invalid').removeClass('is-valid');
                $('#confirmPasswordError').text('Passwords do not match').show();
                return false;
            }
            
            // Visual feedback - button animation
            $('#submitBtn').addClass('pulse-animation');
            
            // Get email from token
            const email = getEmailFromToken();
            if (!email) {
                Swal.fire({
                    icon: 'error',
                    title: 'Authentication Error',
                    text: 'Please sign in again to continue',
                    confirmButtonColor: '#3b82f6'
                }).then(() => {
                    window.location.href = '/login';
                });
                return false;
            }
            
            // Prepare form data
            let formData = new FormData();
            formData.append("Email", email);
            formData.append("NewPassword", newPassword);
            
            // Submit to API
            $.ajax({
                url: 'http://localhost:5086/api/AuthApi/ResetPassword',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function(data) {
                    $('#submitBtn').removeClass('pulse-animation');
                    
                    if (data.success) {
                        Swal.fire({
                            title: "Password Updated",
                            text: "Your password has been changed successfully",
                            icon: "success",
                            confirmButtonColor: '#3b82f6'
                        }).then(() => {
                            window.location.href = "/Admin/Index";
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Update Failed",
                            text: data.message || "Unable to update password",
                            confirmButtonColor: '#3b82f6'
                        });
                    }
                },
                error: function() {
                    $('#submitBtn').removeClass('pulse-animation');
                    
                    Swal.fire({
                        icon: "error",
                        title: "Server Error",
                        text: "Unable to process your request. Please try again later.",
                        confirmButtonColor: '#3b82f6'
                    });
                }
            });
        });
    });
</script>