<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - CareerLink Admin</title>
    <!-- Primary Meta Tags -->
    <meta name="theme-color" content="#4361ee">
    <meta name="description" content="Admin dashboard for CareerLink - Manage your hiring process efficiently">

    <!-- Favicon -->
    <link rel="icon" href="~/img/favicon.ico" type="image/x-icon">
    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/lib/kendo/kendo.default-v2.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="~/css/admin.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-hover: #3a56d4;
            --primary-light: #eef2ff;
            --dark-color: #1e293b;
            --light-color: #f8fafc;
            --gray-color: #64748b;
            --border-radius: 12px;
            --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --glass-effect: rgba(255, 255, 255, 0.85);
            --glass-border: 1px solid rgba(255, 255, 255, 0.18);
            --glass-blur: blur(12px);
            --page-padding: 2rem;
            --card-padding: 1.5rem;
            --section-margin: 2rem;
            --card-margin: 1rem;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
            color: #1e293b;
            padding-top: 80px;
            overflow-x: hidden;
            margin-left: 280px; /* Account for side panel */
            transition: var(--transition);
        }

        /* Side Panel Styles */
        .side-panel {
            position: fixed;
            top: 80px;
            left: 0;
            bottom: 0;
            width: 280px;
            background: var(--glass-effect);
            backdrop-filter: var(--glass-blur);
            -webkit-backdrop-filter: var(--glass-blur);
            border-right: var(--glass-border);
            box-shadow: var(--box-shadow);
            z-index: 1020;
            padding: 1.5rem 0;
            overflow-y: auto;
        }

        .side-panel-item {
            margin-bottom: 0.5rem;
            padding: 0 1.5rem;
            
        }

        .side-panel-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--gray-color);
            border-radius: var(--border-radius);
            transition: var(--transition);
            text-decoration: none;
            font-weight: 500;
        }

        .side-panel-link i {
            width: 24px;
            margin-right: 12px;
            font-size: 1rem;
            text-align: center;
        }

        .side-panel-link:hover {
            background: var(--primary-light);
            color: var(--primary-color);
            transform: translateX(5px);
        }

        .side-panel-link.active {
            color: white;
            background: var(--primary-color);
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.2);
        }

        .side-panel-link.active:hover {
            background: var(--primary-hover);
        }

        /* Enhanced Glassmorphism Navigation Bar */
        .navbar {
            height: 80px;
            background: var(--glass-effect);
            backdrop-filter: var(--glass-blur);
            -webkit-backdrop-filter: var(--glass-blur);
            border-bottom: var(--glass-border);
            box-shadow: 0 2px 30px rgba(0, 0, 0, 0.05);
            padding: 0 2rem;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1030;
        }

        .navbar-brand img {
            height: 20rem;
            width: 150px;
            object-fit: cover;
            transition: var(--transition);
            transform: scale(2.0);
        }

        .floating-animation {
            animation: none !important;
            transform: none !important;
        }

        .navbar-brand:hover img {
            transform: scale(1.05);
        }

        /* Mobile Menu Toggle */
        .mobile-menu-toggle {
            display: none;
            background: none;
            border: none;
            color: var(--gray-color);
            font-size: 1.25rem;
            padding: 0.5rem;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
            margin-right: 1rem;
        }

        .mobile-menu-toggle:hover {
            background: var(--primary-light);
            color: var(--primary-color);
        }

        /* Mobile Menu Dropdown */
        .mobile-menu-dropdown {
            position: fixed;
            top: 80px;
            left: 0;
            right: 0;
            background: var(--glass-effect);
            backdrop-filter: var(--glass-blur);
            -webkit-backdrop-filter: var(--glass-blur);
            border-bottom: var(--glass-border);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            z-index: 1020;
            padding: 1rem;
            display: none;
            flex-direction: column;
            gap: 0.5rem;
        }

        .mobile-menu-dropdown.show {
            display: flex;
        }

        .mobile-menu-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--gray-color);
            border-radius: var(--border-radius);
            transition: var(--transition);
            text-decoration: none;
            font-weight: 500;
        }

        .mobile-menu-link i {
            width: 24px;
            text-align: center;
            margin-right: 12px;
            font-size: 1rem;
        }

        .mobile-menu-link:hover {
            background: var(--primary-light);
            color: var(--primary-color);
        }

        .mobile-menu-link.active {
            color: white;
            background: var(--primary-color);
        }

        /* Notification System - Modern Design */
        .notification-wrapper {
            position: relative;
            margin-right: 1.5rem;
        }

        .notification-btn {
            position: relative;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: white;
            transition: var(--transition);
            border: none;
        }

        .fa-bell {
            color: black;
        }

        .notification-btn:hover {
            background: #e0e7ff;
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.15);
        }

        .notification-badge {
            position: absolute;
            top: -4px;
            right: -4px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: 700;
            border: 2px solid white;
        }

        .notification-dropdown {
            position: absolute;
            right: 0;
            top: 60px;
            width: 380px;
            max-width: 90vw;
            background: var(--glass-effect);
            backdrop-filter: var(--glass-blur);
            -webkit-backdrop-filter: var(--glass-blur);
            border: var(--glass-border);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            z-index: 1050;
            opacity: 0;
            visibility: hidden;
            transform: translateY(10px);
            transition: var(--transition);
            overflow: hidden;
        }

        .notification-dropdown.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .notification-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid rgba(241, 245, 249, 0.5);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.7);
        }

        .notification-title {
            font-size: 1rem;
            font-weight: 600;
            margin: 0;
            color: var(--dark-color);
        }

        .notification-body {
            max-height: 400px;
            overflow-y: auto;
            padding: 0;
        }

        .notification-item {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid rgba(241, 245, 249, 0.5);
            transition: var(--transition);
            cursor: pointer;
            background: rgba(255, 255, 255, 0.5);
        }

        .notification-item:last-child {
            border-bottom: none;
        }

        .notification-item:hover {
            background: rgba(248, 250, 252, 0.8);
        }

        .notification-item.unread {
            background: rgba(238, 242, 255, 0.7);
            border-left: 3px solid var(--primary-color);
        }

        .notification-content {
            flex: 1;
        }

        .notification-text {
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
            line-height: 1.4;
            color: var(--dark-color);
        }

        .notification-time {
            font-size: 0.75rem;
            color: var(--gray-color);
            display: flex;
            align-items: center;
        }

        .notification-time i {
            margin-right: 0.5rem;
            font-size: 0.65rem;
        }

        .notification-footer {
            padding: 0.75rem 1.5rem;
            border-top: 1px solid rgba(241, 245, 249, 0.5);
            text-align: center;
            background: rgba(255, 255, 255, 0.7);
        }

        /* Profile Dropdown - Enhanced Design */
        .profile-dropdown {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            border-radius: 50px;
            transition: var(--transition);
            cursor: pointer;
            background: rgba(255, 255, 255, 0.7);
            border: 1px solid rgba(241, 245, 249, 0.5);
        }

        .profile-dropdown:hover {
            background: rgba(241, 245, 249, 0.8);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .profile-img {
            display: none;
        }

        .profile-dropdown:hover .profile-img {
            transform: scale(1.1);
        }

        .profile-name {
            font-weight: 500;
            margin: 0 0.75rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
            color: var(--dark-color);
        }

        .profile-arrow {
            color: var(--gray-color);
            font-size: 0.75rem;
            transition: var(--transition);
        }

        .dropdown-menu {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 0.5rem;
            margin-top: 0.5rem;
            background: var(--glass-effect);
            backdrop-filter: var(--glass-blur);
            -webkit-backdrop-filter: var(--glass-blur);
            border: var(--glass-border);
        }

        .dropdown-item {
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            color: var(--dark-color);
            border-radius: 8px;
            margin: 0.25rem 0;
            transition: var(--transition);
            display: flex;
            align-items: center;
        }

        .dropdown-item:hover {
            background: var(--primary-light);
            color: var(--primary-color);
            transform: translateX(5px);
        }

        .dropdown-item i {
            width: 20px;
            margin-right: 12px;
            text-align: center;
            font-size: 0.9rem;
        }

        .dropdown-divider {
            border-color: rgba(241, 245, 249, 0.5);
            margin: 0.5rem 0;
        }

        .logout-btn {
            color: #ef4444 !important;
        }

        .logout-btn:hover {
            background: rgba(239, 68, 68, 0.1) !important;
        }

        /* Main Content */
        main {
            padding: var(--page-padding);
            min-height: calc(100vh - 80px);
            background-color: var(--light-color);
        }

        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: var(--card-margin);
            background: white;
        }

        .card-header {
            padding: var(--card-padding);
            background: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-body {
            padding: var(--card-padding);
        }

        .section-title {
            margin-bottom: var(--section-margin);
            font-weight: 600;
            color: var(--dark-color);
        }

        .row {
            margin-bottom: var(--section-margin);
        }

        .col-md-3, .col-md-4, .col-md-6, .col-md-12 {
            padding: var(--card-margin);
        }

        /* Responsive Adjustments */
        @@media (max-width: 992px) {
            body {
                margin-left: 0;
            }

            .side-panel {
                transform: translateX(-100%);
            }

            .side-panel.show {
                transform: translateX(0);
            }

            .mobile-menu-toggle {
                display: flex;
            }

            main {
                padding: 1.5rem;
            }

            .navbar {
                padding: 0 1rem;
            }
        }

        @@media (max-width: 768px) {
            .notification-wrapper {
                margin-right: 0.5rem;
            }

            .profile-name {
                display: none;
            }

            .notification-dropdown {
                right: -10px;
            }
        }

        @@media (max-width: 576px) {
            .notification-dropdown {
                width: 90vw;
                right: 5vw;
            }

            main {
                padding: 1rem;
            }

            .navbar {
                height: 70px;
            }
        }

        .navbar-brand img {
            height: 9.5vh;
            transition: var(--transition);
        }

        #profileImage {
            width: 50px;
            height: 50px;
            display: block !important;
            object-fit: cover;
            border-radius: 20px;
        }
        @* #main-content
        {
            margin-left: 100px;
            margin-top:100px
        } *@
    </style>
</head>

<body>
    <!-- Top Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="/Admin/Index">
                <img src="~/css/Default/images/CL.png" alt="Career Success" class="floating-animation">
            </a>

            <!-- Mobile Menu Toggle (Visible on smaller screens) -->
            <button class="mobile-menu-toggle" type="button" id="mobileMenuToggle">
                <i class="fas fa-bars"></i>
            </button>

            <!-- Right Side Menu -->
            <div class="d-flex align-items-center ms-auto">
                <!-- Notification System -->
                <div class="notification-wrapper">
                    <button class="notification-btn" id="notificationButton">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge" id="notificationBadge">3</span>
                    </button>

                    <div class="notification-dropdown" id="notificationPanel">
                        <div class="notification-header">
                            <h5 class="notification-title">Notifications</h5>
                            <button class="btn btn-sm btn-link text-danger p-0" id="markAllRead">
                                Clear All
                            </button>
                        </div>
                        <div class="notification-body" id="notificationsList">
                            <div class="notification-item unread">
                                <div class="notification-content">
                                    <p class="notification-text"><strong>New Application</strong> - John Doe applied for
                                        Senior Software Engineer</p>
                                    <small class="notification-time"><i class="far fa-clock"></i> 2 hours ago</small>
                                </div>
                            </div>
                            <div class="notification-item unread">
                                <div class="notification-content">
                                    <p class="notification-text"><strong>Profile View</strong> - Your job posting was
                                        viewed 25 times</p>
                                    <small class="notification-time"><i class="far fa-clock"></i> 5 hours ago</small>
                                </div>
                            </div>
                            <div class="notification-item">
                                <div class="notification-content">
                                    <p class="notification-text"><strong>Subscription Update</strong> - Your premium
                                        subscription expires in 5 days</p>
                                    <small class="notification-time"><i class="far fa-clock"></i> 1 day ago</small>
                                </div>
                            </div>
                        </div>
                        <div class="notification-footer">
                            <button class="btn btn-sm btn-link text-primary" id="viewAllNotifications">
                                View All Notifications
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Profile Dropdown -->
                <div class="dropdown ms-2">
                    <div class="profile-dropdown" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        @* <img src="/profile_images/default.png" id="profileImage" class="profile-img" alt="Profile"> *@
                        <span class="profile-name d-none d-lg-inline" id="profileName">Admin</span>
                        <i class="fas fa-chevron-down profile-arrow d-none d-lg-inline"></i>
                    </div>

                    <ul class="dropdown-menu dropdown-menu-end">
                        @* <li><a class="dropdown-item" href="/RecruiterDashboard/Profile"><i class="fas fa-user"></i>
                                Profile</a></li>
                        <li><a class="dropdown-item" href="/RecruiterDashboard/Settings"><i class="fas fa-cog"></i>
                                Settings</a></li>
                        <li>
                            <hr class="dropdown-divider">
                        </li> *@
                        <li><a class="dropdown-item change-password-link" href="javascript:void(0);"><i
                                    class="fas fa-lock"></i> Change Password</a></li>
                        <li><a class="dropdown-item logout-btn" href="javascript:void(0);"><i
                                    class="fas fa-sign-out-alt"></i> Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <!-- Side Panel -->
<div class="side-panel">
    <div class="side-panel-item">
        <a class="side-panel-link @(ViewContext.RouteData.Values["Action"].ToString() == "Index" ? "active" : "")"
            href="/Admin/index">
            <i class="fas fa-tachometer-alt"></i>
            Dashboard
        </a>
    </div>

    <div class="side-panel-item">
        <a class="side-panel-link @(ViewContext.RouteData.Values["Action"].ToString() == "UserManagement" ? "active" : "")"
            href="/Admin/UserManagement">
            <i class="fas fa-building"></i>
            User Management
        </a>
    </div>

    

    <div class="side-panel-item">
        <a class="side-panel-link @(ViewContext.RouteData.Values["Action"].ToString() == "R" ? "active" : "")"
            href="/Admin/R">
            <i class="fas fa-briefcase"></i>
            Company Management
        </a>
    </div>

    <div class="side-panel-item">
        <a class="side-panel-link @(ViewContext.RouteData.Values["Action"].ToString() == "JobManagement" ? "active" : "")"
            href="/Admin/JobManagement">
            <i class="fas fa-tasks"></i>
            Job Management
        </a>
    </div>

    <div class="side-panel-item">
        <a class="side-panel-link @(ViewContext.RouteData.Values["Action"].ToString() == "UsersFeedback" ? "active" : "")"
            href="/Admin/UsersFeedback">
            <i class="fas fa-comments"></i>
            User Feedback
        </a>
    </div>

    <div class="side-panel-item">
        <a class="side-panel-link @(ViewContext.RouteData.Values["Action"].ToString() == "JobReports" ? "active" : "")"
            href="/Admin/JobReports">
            <i class="fa-solid fa-flag"></i>
            Job Reports
        </a>
    </div>
</div>


    <!-- Mobile Menu Dropdown -->
    <div class="mobile-menu-dropdown" id="mobileMenuDropdown">
        <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "Index" ? "active" : "")"
            href="/Admin/Index">
            <i class="fas fa-tachometer-alt"></i> Dashboard
        </a>
        <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "CompanyRegistration" ? "active" : "")"
            href="/Admin/UserManagement">
            <i class="fas fa-building"></i> User Management
        </a>
        <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "AddJobPost" ? "active" : "")"
            href="/Admin/R">
            <i class="fas fa-briefcase"></i> Company Management
        </a>
        <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "ManageJobs" ? "active" : "")"
            href="/Admin/JobManagement">
            <i class="fas fa-tasks"></i> Manage Jobs
        </a>
        @* <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "Candidates" ? "active" : "")"
            href="/RecruiterDashboard/Candidates">
            <i class="fas fa-users"></i> Candidates
        </a>
        <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "Applications" ? "active" : "")"
            href="/RecruiterDashboard/Applications">
            <i class="fas fa-file-alt"></i> Applications
        </a>
        <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "Analytics" ? "active" : "")"
            href="/RecruiterDashboard/Analytics">
            <i class="fas fa-chart-bar"></i> Analytics
        </a>
        <a class="mobile-menu-link @(ViewContext.RouteData.Values["Action"].ToString() == "Settings" ? "active" : "")"
            href="/RecruiterDashboard/Settings">
            <i class="fas fa-cog"></i> Settings
        </a> *@
    </div>

    <!-- Main Content -->
    <main role="main" id="main-content">
        @RenderBody()
    </main>

    <!-- Scripts -->
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/kendo/kendo.all.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script>
        $(document).ready(function () {
            // Mobile menu toggle
            $('#mobileMenuToggle').click(function () {
                $('#mobileMenuDropdown').toggleClass('show');
                $(this).find('i').toggleClass('fa-bars fa-times');
            });

            // Close mobile menu when clicking outside
            $(document).click(function (e) {
                if (!$(e.target).closest('#mobileMenuDropdown').length &&
                    !$(e.target).is('#mobileMenuToggle')) {
                    $('#mobileMenuDropdown').removeClass('show');
                    $('#mobileMenuToggle').find('i').removeClass('fa-times').addClass('fa-bars');
                }
            });

            
            // Get User ID from token
            function getUserIdFromToken() {
                const token = localStorage.getItem("token");
                if (!token) return null;

                try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    return payload.uid;
                } catch (e) {
                    console.error("Error decoding token:", e);
                    return null;
                }
            }

            // User profile and logout functionality
            @* const userId = getUserIdFromToken();
            if (!userId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Session Expired',
                    text: 'You need to log in again',
                    confirmButtonColor: '#4361ee',
                }).then(() => {
                    window.location.href = '/Auth/Login';
                });
            } else {
                // Fetch user profile data via AJAX
                $.ajax({
                    url: `http://localhost:5086/api/UserDetails/GetUserProfile/${userId}`,
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + localStorage.getItem("token")
                    },
                    success: function (response) {
                        const userData = response.data || response;
                        if (userData) {
                            $("#profileName").text(userData.c_fullName || "Recruiter");

                            let profileImagePath = userData.c_profileImage;

                            // Optional: If image path is relative, prefix with your Cloudinary base URL
                            if (profileImagePath && !profileImagePath.startsWith("http")) {
                                profileImagePath = `https://res.cloudinary.com/your_cloud_name/${profileImagePath}`;
                            }

                            console.log("Final Image URL:", profileImagePath);

                            if (profileImagePath) {
                                // Force reload to avoid cache issues
                                $("#profileImage").attr("src", profileImagePath + "?" + new Date().getTime());

                                // Add pulse animation
                                $("#profileImage").addClass('animate__animated animate__pulse');
                                setTimeout(() => {
                                    $("#profileImage").removeClass('animate__animated animate__pulse');
                                }, 1000);
                            }
                        }
                    },
                    error: function () {
                        $("#profileName").text("Recruiter");
                        $("#profileImage").attr("src", "/profile_images/default.png");
                    }
                });

            } *@
            $(".change-password-link").on("click", function () {
                    window.location.href = "/Admin/ChangePassword"; // Adjust path
                });

            // Logout functionality with enhanced UI
            $(".logout-btn").click(function () {
                Swal.fire({
                    title: 'Ready to Leave?',
                    text: 'Are you sure you want to log out of your account?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#4361ee',
                    cancelButtonColor: '#64748b',
                    confirmButtonText: 'Yes, log out',
                    cancelButtonText: 'Stay logged in',
                    background: 'rgba(255, 255, 255, 0.9)',
                    backdrop: `
                        rgba(67, 97, 238, 0.1)
                        url("/img/nyan-cat.gif")
                        left top
                        no-repeat
                    `
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading animation
                        Swal.fire({
                            title: 'Logging Out',
                            html: 'Please wait while we securely log you out...',
                            timer: 1500,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading()
                            },
                            willClose: () => {
                                localStorage.removeItem("token");
                                window.location.href = "/";
                            }
                        });
                    }
                });
            });

            // Notification badge animation
            function pulseBadge() {
                $("#notificationBadge").css('animation', 'pulse 1.5s infinite');
                setTimeout(() => {
                    $("#notificationBadge").css('animation', '');
                }, 3000);
            }

            // Initial pulse to draw attention to notifications
            if ($("#notificationBadge").text() !== '0') {
                setTimeout(pulseBadge, 1000);
            }
        });
    </script>

    <script>
        $(document).ready(function () {
            // Function to format date
            function formatDate(dateString) {
                const date = new Date(dateString);
                const now = new Date();
                const diffInHours = Math.abs(now - date) / 36e5;

                if (diffInHours < 24) {
                    return `${Math.round(diffInHours)} hours ago`;
                } else {
                    return date.toLocaleDateString();
                }
            }

            // Function to fetch and update notification count
            async function updateNotificationCount() {
                try {
                    const response = await fetch('http://localhost:5086/api/AdminApi/get-notification-count');
                    const data = await response.json();
                    const badge = $("#notificationBadge");
                    
                    if (data.totalNotifications > 0) {
                        badge.text(data.totalNotifications).show();
                        pulseBadge();
                    } else {
                        badge.hide();
                    }
                } catch (error) {
                    console.error('Error fetching notification count:', error);
                }
            }

            // Function to fetch and display notifications
            async function fetchNotifications() {
                try {
                    const response = await fetch('http://localhost:5086/api/AdminApi/unread-notifications');
                    const notifications = await response.json();
                    const notificationsList = $("#notificationsList");
                    notificationsList.empty();

                    if (notifications && notifications.length > 0) {
                        notifications.forEach(notification => {
                            const notificationItem = `
                                <div class="notification-item ${!notification.isRead ? 'unread' : ''}">
                                    <div class="notification-content">
                                        <p class="notification-text">${notification.message}</p>
                                        <small class="notification-time">
                                            <i class="far fa-clock"></i> ${formatDate(notification.createdAt)}
                                        </small>
                                    </div>
                                </div>
                            `;
                            notificationsList.append(notificationItem);
                        });
                    } else {
                        notificationsList.append(`
                            <div class="notification-item">
                                <div class="notification-content">
                                    <p class="notification-text">No new notifications</p>
                                </div>
                            </div>
                        `);
                    }
                } catch (error) {
                    console.error('Error fetching notifications:', error);
                }
            }

            // Function to mark all notifications as read
            async function markAllNotificationsAsRead() {
                try {
                    const response = await fetch('http://localhost:5086/api/AdminApi/mark-all-notifications-as-read', {
                        method: 'PUT'
                    });
                    const data = await response.json();
                    
                    if (data.message) {
                        $(".notification-item").removeClass('unread');
                        updateNotificationCount();
                        return true;
                    }
                    return false;
                } catch (error) {
                    console.error('Error marking notifications as read:', error);
                    return false;
                }
            }

            // Mobile menu toggle
            $('#mobileMenuToggle').click(function () {
                $('#mobileMenuDropdown').toggleClass('show');
                $(this).find('i').toggleClass('fa-bars fa-times');
            });

            // Close mobile menu when clicking outside
            $(document).click(function (e) {
                if (!$(e.target).closest('#mobileMenuDropdown').length &&
                    !$(e.target).is('#mobileMenuToggle')) {
                    $('#mobileMenuDropdown').removeClass('show');
                    $('#mobileMenuToggle').find('i').removeClass('fa-times').addClass('fa-bars');
                }
            });

            // Notification system with enhanced interactions
            let notificationPanelVisible = false;

            // Toggle notification panel with animation
            $("#notificationButton").click(function (e) {
                e.stopPropagation();
                $("#notificationPanel").toggleClass('show');
                notificationPanelVisible = !notificationPanelVisible;

                if (notificationPanelVisible) {
                    fetchNotifications();
                }

                // Pulse animation for the bell icon when clicked
                $(this).find('i').addClass('animate__animated animate__tada');
                setTimeout(() => {
                    $(this).find('i').removeClass('animate__animated animate__tada');
                }, 1000);
            });

            // Close panel when clicking outside
            $(document).click(function (e) {
                if (!$(e.target).closest("#notificationPanel").length &&
                    !$(e.target).is("#notificationButton")) {
                    $("#notificationPanel").removeClass('show');
                    notificationPanelVisible = false;
                }
            });

            // Mark all as read with confirmation
            $("#markAllRead").click(function () {
                Swal.fire({
                    title: 'Clear all notifications?',
                    text: "This will mark all notifications as read",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#4361ee',
                    cancelButtonColor: '#64748b',
                    confirmButtonText: 'Yes, clear all'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        const success = await markAllNotificationsAsRead();
                        if (success) {
                            Swal.fire(
                                'Cleared!',
                                'All notifications have been marked as read.',
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to mark notifications as read.',
                                'error'
                            );
                        }
                    }
                });
            });

            // View all notifications
            $("#viewAllNotifications").click(function () {
                window.location.href = "/Admin/AllNotifications";
            });

            // Function to handle notification selection and deletion
            async function handleNotificationSelection() {
                const selectedNotifications = [];
                $(".notification-checkbox:checked").each(function() {
                    selectedNotifications.push(parseInt($(this).val()));
                });

                if (selectedNotifications.length === 0) {
                    Swal.fire({
                        title: 'No Selection',
                        text: 'Please select at least one notification to delete',
                        icon: 'warning',
                        confirmButtonColor: '#4361ee',
                    });
                    return;
                }

                Swal.fire({
                    title: 'Delete Notifications?',
                    text: `Are you sure you want to delete ${selectedNotifications.length} notification(s)?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#4361ee',
                    cancelButtonColor: '#64748b',
                    confirmButtonText: 'Yes, delete them'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            const response = await fetch('http://localhost:5086/api/AdminApi/delete-notifications', {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(selectedNotifications)
                            });

                            const data = await response.json();
                            
                            if (response.ok) {
                                Swal.fire(
                                    'Deleted!',
                                    data.message,
                                    'success'
                                ).then(() => {
                                    fetchNotifications();
                                    updateNotificationCount();
                                });
                            } else {
                                throw new Error(data.message);
                            }
                        } catch (error) {
                            Swal.fire(
                                'Error!',
                                error.message,
                                'error'
                            );
                        }
                    }
                });
            }

            // Add event listener for delete button
            $("#deleteSelectedNotifications").click(handleNotificationSelection);

            // Notification badge animation
            function pulseBadge() {
                $("#notificationBadge").css('animation', 'pulse 1.5s infinite');
                setTimeout(() => {
                    $("#notificationBadge").css('animation', '');
                }, 3000);
            }

            // Initial load
            updateNotificationCount();
            fetchNotifications();

            // Set up polling for new notifications (every 30 seconds)
            setInterval(() => {
                updateNotificationCount();
                if (notificationPanelVisible) {
                    fetchNotifications();
                }
            }, 30000);
        });
    </script>
    @{
        IgnoreSection("Styles");
    }
</body>

</html>