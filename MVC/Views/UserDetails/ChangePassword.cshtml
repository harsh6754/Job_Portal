@{
    Layout = "~/Views/Shared/_NewLayout.cshtml";
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}

<!-- Styles -->
<style>
    :root {
        --primary-color: #4361ee;
        --primary-dark: #2541df;
        --primary-light: #e7eafc;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --neutral-50: #fafafa;
        --neutral-100: #f5f5f5;
        --neutral-200: #e5e5e5;
        --neutral-300: #d4d4d4;
        --neutral-400: #a3a3a3;
        --neutral-500: #737373;
        --neutral-600: #525252;
        --neutral-700: #404040;
        --neutral-800: #262626;
        --neutral-900: #171717;
        --border-radius-sm: 6px;
        --border-radius: 12px;
        --border-radius-lg: 16px;
        --box-shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
        --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --box-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --transition-fast: all 0.2s ease;
        --transition: all 0.3s ease;
    }

    body {
        background-color: var(--neutral-100);
    }

    .password-container {
        max-width: 560px;
        margin: 3rem auto;
        padding: 0 1rem;
    }

    .password-card {
        background: white;
        border-radius: var(--border-radius-lg);
        box-shadow: var(--box-shadow-lg);
        overflow: hidden;
        transition: var(--transition);
        position: relative;
    }
    
    .password-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(to right, var(--primary-color), var(--primary-dark));
    }

    .password-header {
        padding: 2rem 2.5rem;
        border-bottom: 1px solid var(--neutral-200);
    }

    .password-title {
        font-weight: 700;
        font-size: 1.5rem;
        margin: 0;
        color: var(--neutral-800);
    }
    
    .password-subtitle {
        font-size: 0.875rem;
        color: var(--neutral-500);
        margin-top: 0.5rem;
    }

    .password-body {
        padding: 2rem 2.5rem;
    }

    .form-group {
        margin-bottom: 1.75rem;
    }

    .form-label {
        font-weight: 600;
        color: var(--neutral-700);
        margin-bottom: 0.5rem;
        display: block;
        font-size: 0.875rem;
    }

    .input-container {
        position: relative;
    }

    .password-input-wrapper {
        position: relative;
        display: flex;
        align-items: center;
        border: 1px solid var(--neutral-300);
        border-radius: var(--border-radius);
        transition: var(--transition-fast);
        background-color: white;
        box-shadow: var(--box-shadow-sm);
    }

    .password-input-wrapper:focus-within {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
    }

    .password-input-wrapper.is-invalid {
        border-color: var(--danger-color);
    }

    .password-input-wrapper.is-valid {
        border-color: var(--success-color);
    }

    .input-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        color: var(--neutral-500);
    }

    .form-control {
        border: none;
        padding: 0.875rem 0.75rem 0.875rem 0;
        font-size: 0.9375rem;
        width: 100%;
        background: transparent;
    }

    .form-control:focus {
        outline: none;
        box-shadow: none;
    }

    .toggle-password {
        padding: 0 1rem;
        cursor: pointer;
        color: var(--neutral-500);
        transition: var(--transition-fast);
        display: flex;
        align-items: center;
    }

    .toggle-password:hover {
        color: var(--primary-color);
    }

    .password-strength-container {
        margin-top: 0.75rem;
    }

    .password-strength-meter {
        height: 5px;
        background: var(--neutral-200);
        border-radius: 5px;
        overflow: hidden;
        position: relative;
    }

    .password-strength-value {
        height: 100%;
        width: 0;
        transition: width 0.3s ease, background-color 0.3s ease;
        border-radius: 5px;
    }

    .password-criteria {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.75rem;
    }

    .criteria-item {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 1rem;
        background-color: var(--neutral-200);
        color: var(--neutral-600);
        display: flex;
        align-items: center;
        gap: 0.375rem;
        transition: var(--transition-fast);
    }

    .criteria-item.valid {
        background-color: rgba(16, 185, 129, 0.1);
        color: var(--success-color);
    }

    .criteria-item i {
        font-size: 0.625rem;
    }

    .error {
        color: var(--danger-color);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: block;
    }

    .btn-container {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-weight: 600;
        border-radius: var(--border-radius);
        padding: 0.875rem 1.5rem;
        transition: var(--transition);
        font-size: 0.9375rem;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: white;
        box-shadow: 0 2px 4px rgba(67, 97, 238, 0.2);
        flex: 1;
    }

    .btn-primary:hover {
        background-color: var(--primary-dark);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(67, 97, 238, 0.25);
    }

    .btn-secondary {
        background-color: var(--neutral-100);
        color: var(--neutral-700);
        border: 1px solid var(--neutral-300);
    }

    .btn-secondary:hover {
        background-color: var(--neutral-200);
        color: var(--neutral-800);
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .password-card {
        animation: fadeIn 0.4s ease-out;
    }

    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(67, 97, 238, 0.4);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(67, 97, 238, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(67, 97, 238, 0);
        }
    }

    .pulse-animation {
        animation: pulse 1.5s infinite;
    }

    @@media (max-width: 768px) {
        .password-container {
            margin: 1.5rem auto;
        }

        .password-header, 
        .password-body {
            padding: 1.5rem;
        }

        .btn-container {
            flex-direction: column;
        }

        .btn {
            width: 100%;
        }
    }
</style>

<!-- UI -->
<div class="password-container">
    <div class="password-card">
        <div class="password-header">
            <h1 class="password-title">Change Your Password</h1>
            <p class="password-subtitle">Keep your account secure with a strong, unique password</p>
        </div>
        <div class="password-body">
            <form id="resetPasswordForm">
                <!-- Current Password -->
                <div class="form-group">
                    <label for="oldPassword" class="form-label">Current Password</label>
                    <div class="input-container">
                        <div class="password-input-wrapper" id="oldPasswordWrapper">
                            <span class="input-icon">
                                <i class="fas fa-key"></i>
                            </span>
                            <input type="password" class="form-control" id="oldPassword" name="oldPassword"
                                placeholder="Enter your current password" required>
                            <span class="toggle-password" toggle="#oldPassword">
                                <i class="fas fa-eye-slash"></i>
                            </span>
                        </div>
                        <div id="oldPasswordError" class="error" style="display: none;"></div>
                    </div>
                </div>

                <!-- New Password -->
                <div class="form-group">
                    <label for="newPassword" class="form-label">New Password</label>
                    <div class="input-container">
                        <div class="password-input-wrapper" id="newPasswordWrapper">
                            <span class="input-icon">
                                <i class="fas fa-lock"></i>
                            </span>
                            <input type="password" class="form-control" id="newPassword" name="newPassword"
                                placeholder="Create a strong password" required>
                            <span class="toggle-password" toggle="#newPassword">
                                <i class="fas fa-eye-slash"></i>
                            </span>
                        </div>
                        
                        <div class="password-strength-container">
                            <div class="password-strength-meter">
                                <div id="passwordStrengthValue" class="password-strength-value"></div>
                            </div>
                            <div class="password-criteria" id="passwordCriteria">
                                <span class="criteria-item" data-criteria="length">
                                    <i class="fas fa-circle"></i> 6+ characters
                                </span>
                                <span class="criteria-item" data-criteria="uppercase">
                                    <i class="fas fa-circle"></i> Uppercase
                                </span>
                                <span class="criteria-item" data-criteria="lowercase">
                                    <i class="fas fa-circle"></i> Lowercase
                                </span>
                                <span class="criteria-item" data-criteria="number">
                                    <i class="fas fa-circle"></i> Number
                                </span>
                                <span class="criteria-item" data-criteria="special">
                                    <i class="fas fa-circle"></i> Special char
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Confirm Password -->
                <div class="form-group">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <div class="input-container">
                        <div class="password-input-wrapper" id="confirmPasswordWrapper">
                            <span class="input-icon">
                                <i class="fas fa-check-circle"></i>
                            </span>
                            <input type="password" class="form-control" id="confirmPassword"
                                name="confirmPassword" placeholder="Confirm your new password" required>
                            <span class="toggle-password" toggle="#confirmPassword">
                                <i class="fas fa-eye-slash"></i>
                            </span>
                        </div>
                        <div id="confirmPasswordError" class="error" style="display: none;"></div>
                    </div>
                </div>

                <!-- Buttons -->
                <div class="btn-container">
                    <button type="button" class="btn btn-secondary" onclick="window.location.href='/UserDetails/PersonalInfo'">
                        <i class="fas fa-arrow-left"></i> Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-shield-alt"></i> Update Password
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    $(document).ready(function () {
        // Function to decode JWT and extract user ID
        function getUserIdFromToken() {
            let token = localStorage.getItem("token");
            if (!token) {
                console.error("No token found in localStorage");
                return null;
            }
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                return payload.uid || payload.userId || null;
            } catch (e) {
                console.error("Error decoding token:", e);
                return null;
            }
        }

        // Function to decode JWT and extract email
        function getEmailFromToken() {
            let token = localStorage.getItem("token");
            if (!token) {
                console.error("No token found in localStorage");
                return null;
            }
            try {
                let payload = JSON.parse(atob(token.split('.')[1]));
                return payload.email || payload.sub || null;
            } catch (e) {
                console.error("Error decoding token for email:", e);
                return null;
            }
        }

        // Toggle password visibility
        $(document).on('click', '.toggle-password', function () {
            const input = $($(this).attr("toggle"));
            const icon = $(this).find("i");

            if (input.attr("type") === "password") {
                input.attr("type", "text");
                icon.removeClass("fa-eye-slash").addClass("fa-eye");
            } else {
                input.attr("type", "password");
                icon.removeClass("fa-eye").addClass("fa-eye-slash");
            }
        });

        // Check old password validity
        var userId = getUserIdFromToken();
        let oldPasswordValid = false;

        function showOldPasswordError(message) {
            $('#oldPasswordError').text(message).show();
            $('#oldPasswordWrapper').addClass('is-invalid').removeClass('is-valid');
        }

        function clearOldPasswordError() {
            $('#oldPasswordError').text('').hide();
            $('#oldPasswordWrapper').removeClass('is-invalid');
        }

        $('#oldPassword').on('blur', function () {
            const oldPassword = $(this).val();
            clearOldPasswordError();

            if (!oldPassword) {
                showOldPasswordError('Please enter your current password');
                oldPasswordValid = false;
                return;
            }

            if (oldPassword.length < 6) {
                showOldPasswordError('Password must be at least 6 characters');
                oldPasswordValid = false;
                return;
            }

            // Validate against server
            $.ajax({
                url: 'http://localhost:5086/api/AuthApi/CheckOldPassword',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ oldPassword: oldPassword, userId: userId }),
                success: function (data) {
                    if (data.isValid) {
                        oldPasswordValid = true;
                        $('#oldPasswordWrapper').addClass('is-valid').removeClass('is-invalid');
                        clearOldPasswordError();
                    } else {
                        oldPasswordValid = false;
                        showOldPasswordError('Current password is incorrect');
                    }
                },
                error: function () {
                    oldPasswordValid = false;
                    showOldPasswordError('Error verifying password');
                }
            });
        });

        // Password Strength Checker
        const criteriaMap = {
            'length': password => password.length >= 6,
            'uppercase': password => /[A-Z]/.test(password),
            'lowercase': password => /[a-z]/.test(password),
            'number': password => /[0-9]/.test(password),
            'special': password => /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
        };

        function updatePasswordStrength(password) {
            // Calculate met criteria count
            let metCount = 0;
            let totalCriteria = Object.keys(criteriaMap).length;
            
            // Update each criteria item
            for (const [criteria, checkFn] of Object.entries(criteriaMap)) {
                const $criteriaItem = $(`.criteria-item[data-criteria="${criteria}"]`);
                const isMet = checkFn(password);
                
                if (isMet) {
                    $criteriaItem.addClass('valid');
                    $criteriaItem.find('i').removeClass('fa-circle').addClass('fa-check-circle');
                    metCount++;
                } else {
                    $criteriaItem.removeClass('valid');
                    $criteriaItem.find('i').removeClass('fa-check-circle').addClass('fa-circle');
                }
            }
            
            // Update strength bar
            const strengthPercentage = (metCount / totalCriteria) * 100;
            const $bar = $('#passwordStrengthValue');
            
            $bar.css('width', `${strengthPercentage}%`);
            
            // Set color based on strength
            if (strengthPercentage <= 20) {
                $bar.css('background-color', '#ef4444'); // Red
            } else if (strengthPercentage <= 40) {
                $bar.css('background-color', '#f59e0b'); // Amber
            } else if (strengthPercentage <= 60) {
                $bar.css('background-color', '#f59e0b'); // Orange
            } else if (strengthPercentage <= 80) {
                $bar.css('background-color', '#a3e635'); // Lime
            } else {
                $bar.css('background-color', '#10b981'); // Green
                if (password.length >= 6) {
                    $('#newPasswordWrapper').addClass('is-valid');
                }
            }
            
            // Return the number of criteria met for validation
            return metCount;
        }

        // Update password strength in real-time
        $('#newPassword').on('input', function() {
            const password = $(this).val();
            updatePasswordStrength(password);
            
            // Check for password match on every input
            const confirmPassword = $('#confirmPassword').val();
            if (confirmPassword && confirmPassword === password) {
                $('#confirmPasswordWrapper').addClass('is-valid').removeClass('is-invalid');
                $('#confirmPasswordError').hide();
            } else if (confirmPassword) {
                $('#confirmPasswordWrapper').addClass('is-invalid').removeClass('is-valid');
                $('#confirmPasswordError').text('Passwords do not match').show();
            }
        });
        
        // Check password match
        $('#confirmPassword').on('input', function() {
            const confirmPassword = $(this).val();
            const password = $('#newPassword').val();
            
            if (!confirmPassword) {
                $('#confirmPasswordWrapper').removeClass('is-valid is-invalid');
                $('#confirmPasswordError').hide();
            } else if (confirmPassword === password) {
                $('#confirmPasswordWrapper').addClass('is-valid').removeClass('is-invalid');
                $('#confirmPasswordError').hide();
            } else {
                $('#confirmPasswordWrapper').addClass('is-invalid').removeClass('is-valid');
                $('#confirmPasswordError').text('Passwords do not match').show();
            }
        });

        // Form submission
        $("#resetPasswordForm").on('submit', function(e) {
            e.preventDefault();
            
            // Validate old password
            if (!oldPasswordValid) {
                showOldPasswordError('Please verify your current password');
                $('#oldPassword').focus();
                return false;
            }
            
            // Validate new password
            const newPassword = $('#newPassword').val();
            const metCriteria = Object.entries(criteriaMap)
                .filter(([_, checkFn]) => checkFn(newPassword))
                .length;
            
            if (metCriteria < 5) {
                $('#newPasswordWrapper').addClass('is-invalid').removeClass('is-valid');
                Swal.fire({
                    title: "Weak Password",
                    text: "Please ensure your password meets all the security requirements",
                    icon: "warning",
                    confirmButtonColor: '#4361ee'
                });
                return false;
            }
            
            // Validate password match
            const confirmPassword = $('#confirmPassword').val();
            if (newPassword !== confirmPassword) {
                $('#confirmPasswordWrapper').addClass('is-invalid').removeClass('is-valid');
                $('#confirmPasswordError').text('Passwords do not match').show();
                return false;
            }
            
            // Visual feedback - button animation
            $('#submitBtn').addClass('pulse-animation');
            
            // Get email from token
            const email = getEmailFromToken();
            if (!email) {
                Swal.fire({
                    icon: 'error',
                    title: 'Authentication Error',
                    text: 'Please sign in again to continue',
                    confirmButtonColor: '#4361ee'
                }).then(() => {
                    window.location.href = '/login';
                });
                return false;
            }
            
            // Prepare form data
            let formData = new FormData();
            formData.append("Email", email);
            formData.append("NewPassword", newPassword);
            
            // Submit to API
            $.ajax({
                url: 'http://localhost:5086/api/AuthApi/ResetPassword',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function(data) {
                    $('#submitBtn').removeClass('pulse-animation');
                    
                    if (data.success) {
                        Swal.fire({
                            title: "Success!",
                            text: "Your password has been updated successfully",
                            icon: "success",
                            confirmButtonColor: '#4361ee'
                        }).then(() => {
                            window.location.href = "/UserDetails/PersonalInfo";
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Update Failed",
                            text: data.message || "Unable to update password",
                            confirmButtonColor: '#4361ee'
                        });
                    }
                },
                error: function() {
                    $('#submitBtn').removeClass('pulse-animation');
                    
                    Swal.fire({
                        icon: "error",
                        title: "Server Error",
                        text: "Unable to process your request. Please try again later.",
                        confirmButtonColor: '#4361ee'
                    });
                }
            });
        });
    });
</script>