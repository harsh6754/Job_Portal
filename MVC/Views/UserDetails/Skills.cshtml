@{
    Layout = "~/Views/Shared/_NewLayout.cshtml";
    ViewData["Title"] = "Skills";
}

<!-- Include Select2 CSS & JS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

<style>
    :root {
        --primary: #4361ee;
        --primary-dark: #3a56d4;
        --secondary: #3f37c9;
        --accent: #4895ef;
        --danger: #f72585;
        --success: #4cc9f0;
        --light: #f8f9fa;
        --dark: #212529;
        --gray: #6c757d;
        --light-gray: #e9ecef;
        --border-radius: 12px;
        --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        --transition: all 0.3s ease;
    }

    .skills-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1.5rem;
    }

    .skills-card {
        background: #fff;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: hidden;
        transition: var(--transition);
    }

    .skills-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.12);
    }

    .card-header {
        background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
        padding: 1.75rem 2rem;
        color: white;
        position: relative;
        overflow: hidden;
    }

    .card-header::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 100%;
        height: 200%;
        background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 70%);
        transform: rotate(30deg);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1.5rem;
        position: relative;
        z-index: 1;
    }

    .title-section {
        flex: 1;
    }

    .header-icon {
        font-size: 2rem;
        margin-bottom: 0.75rem;
        color: rgba(255, 255, 255, 0.9);
    }

    .skills-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin: 0;
        color: white;
    }

    .skills-subtitle {
        font-size: 0.9rem;
        opacity: 0.9;
        margin-top: 0.25rem;
        font-weight: 300;
    }

    .card-body {
        padding: 2rem;
    }

    .skills-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
        min-height: 60px;
    }

    .skill-item {
        background: #fff;
        border-radius: 50px;
        padding: 0.5rem 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid var(--light-gray);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition);
    }

    .skill-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .skill-name {
        font-weight: 500;
        color: var(--dark);
    }

    .skill-actions {
        display: flex;
        gap: 0.25rem;
    }

    .skill-btn {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        cursor: pointer;
        transition: var(--transition);
        font-size: 0.7rem;
    }

    .edit-btn {
        background: rgba(67, 97, 238, 0.1);
        color: var(--primary);
    }

    .edit-btn:hover {
        background: rgba(67, 97, 238, 0.2);
    }

    .delete-btn {
        background: rgba(220, 53, 69, 0.1);
        color: var(--danger);
    }

    .delete-btn:hover {
        background: rgba(220, 53, 69, 0.2);
    }

    .skill-form {
        display: flex;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }

    .skill-input {
        flex: 1;
        padding: 0.75rem 1rem;
        border: 1px solid var(--light-gray);
        border-radius: var(--border-radius);
        font-size: 0.95rem;
        transition: var(--transition);
    }

    .skill-input:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.1);
        outline: none;
    }

    .save-btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 0 1.5rem;
        border-radius: var(--border-radius);
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition);
        cursor: pointer;
    }

    .save-btn:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
    }

    .empty-state {
        text-align: center;
        padding: 2rem;
        margin-left: 18rem;
        color: var(--gray);
    }

    .empty-icon {
        font-size: 3rem;
        color: var(--primary);
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-title {
        font-size: 1.25rem;
        margin-bottom: 0.5rem;
        color: var(--dark);
        font-weight: 600;
    }

    .empty-text {
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
    }

    .add-btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 0.75rem 1.75rem;
        border-radius: var(--border-radius);
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition);
        cursor: pointer;
    }

    .add-btn:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(67, 97, 238, 0.2);
    }

    @@media (max-width: 768px) {
        .card-header {
            padding: 1.5rem;
        }

        .header-content {
            flex-direction: column;
            align-items: flex-start;
        }

        .card-body {
            padding: 1.5rem;
        }

        .skill-form {
            flex-direction: column;
        }

        .save-btn {
            width: 100%;
            justify-content: center;
            padding: 0.75rem;
        }
    }

    @@media (max-width: 576px) {
        .skills-title {
            font-size: 1.5rem;
        }

        .skill-item {
            padding: 0.5rem 0.75rem;
        }
    }

    .swal2-confirm {
        background-color: #4361ee;
    }
</style>

<div class="skills-container">
    <div class="skills-card">
        <!-- Card Header -->
        <div class="card-header">
            <div class="header-content"><i class="fas fa-code header-icon"></i>
                <div class="title-section">
                    <h2 class="skills-title">My Skills</h2>
                    <p class="skills-subtitle">Manage your professional skills and expertise</p>
                </div>
            </div>
        </div>

        <!-- Card Body -->
        <div class="card-body">
            <!-- Skills List -->
            <div id="skillsList" class="skills-list">
                <!-- Empty State -->
                <div class="empty-state">
                    <i class="fas fa-code empty-icon"></i>
                    <h3 class="empty-title">No Skills Added Yet</h3>
                    <p class="empty-text">Start building your professional profile by adding your skills</p>
                </div>
            </div>

            <!-- Skill Input Form -->
            <div class="skill-form">
                <input type="hidden" id="skillid">
                <input type="text" id="skillInput" class="skill-input"
                    placeholder="Enter a skill (e.g. JavaScript, Project Management)">
                <button class="save-btn" onclick="saveSkill()">
                    <i class="fas fa-save"></i> Save
                </button>
            </div>

            <!-- Predefined Skills Section -->
<div id="predefinedSkills" class="predefined-skills-container"></div>

        </div>
    </div>
</div>

<style>
.predefined-skills-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 20px;
}

.predefined-skill-btn {
    padding: 8px 14px;
    background-color: transparent;
    color: #2c3e50;
    border: 1px solid #dcdcdc;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
}

.predefined-skill-btn:hover {
    background-color: #f0f0f0;
    transform: scale(1.05);
}
</style>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function getUserIdFromToken() {
            let token = localStorage.getItem("token");
            if (!token) return null;
            let payload = JSON.parse(atob(token.split('.')[1]));
            return payload.uid;
        }

        var userId = getUserIdFromToken();

        $(document).ready(function () {
            loadSkills();
            loadPredefinedSkills();
        });

        function loadSkills() {
            $.ajax({
                url: `http://localhost:5086/api/UserDetails/GetUserSkills?id=${userId}`,
                type: "GET",
                success: function (response) {
                    let skillsList = $("#skillsList");
                    skillsList.empty();

                    if (response.length === 0) {
                        skillsList.html(`
                                <div class="empty-state">
                                    <i class="fas fa-code empty-icon"></i>
                                    <h3 class="empty-title">No Skills Added Yet</h3>
                                    <p class="empty-text">Start building your professional profile by adding your skills</p>
                                </div>
                            `);
                        return;
                    }

                    response.forEach(function (skill) {
                        let skillItem = `
                                <div class="skill-item">
                                    <span class="skill-name">${skill.c_skill_name}</span>
                                    <div class="skill-actions">
                                        <button class="skill-btn edit-btn" onclick="editSkill(${skill.c_skill_id})">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="skill-btn delete-btn" onclick="deleteSkill(${skill.c_skill_id})">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            `;
                        skillsList.append(skillItem);
                    });
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "Failed to load skills. Please try again.",
                        icon: "error"
                    });
                }
            });
        }

        function saveSkill() {
            let skillInput = $("#skillInput");
            let skillValue = skillInput.val().trim();
            let skillId = $("#skillid").val();

            if (!skillValue) {
                Swal.fire({
                    title: "Missing Skill",
                    text: "Please enter a skill!",
                    icon: "warning"
                });
                return;
            }

            // Fetch current skills before adding a new one
            $.ajax({
                url: `http://localhost:5086/api/UserDetails/GetUserSkills?id=${userId}`,
                type: "GET",
                success: function (response) {
                    let existingSkills = response.map(skill => skill.c_skill_name.toLowerCase());

                    // Check if skill already exists (case-insensitive)
                    if (!skillId && existingSkills.includes(skillValue.toLowerCase())) {
                        Swal.fire({
                            title: "Duplicate Skill",
                            text: `"${skillValue}" is already added!`,
                            icon: "warning"
                        });
                        return;
                    }

                    // Check if user has already added 15 skills
                    if (!skillId && existingSkills.length >= 15) {
                        Swal.fire({
                            title: "Skill Limit Reached",
                            text: "You cannot add more than 15 skills!",
                            icon: "warning"
                        });
                        return;
                    }

                    let formData = new FormData();
                    formData.append("c_user_id", userId);
                    formData.append("c_skill_name", skillValue);

                    let url, method;
                    if (skillId) {
                        url = "http://localhost:5086/api/UserDetails/UpdateUserSkills";
                        method = "PUT";
                        formData.append("c_skill_id", skillId);
                    } else {
                        url = "http://localhost:5086/api/UserDetails/AddUserSkills";
                        method = "POST";
                    }

                    Swal.fire({
                        title: skillId ? "Update Skill?" : "Add Skill?",
                        text: skillId ? "Are you sure you want to update this skill?" : "Do you want to add this skill?",
                        icon: "question",
                        showCancelButton: true,
                        confirmButtonText: "Yes",
                        cancelButtonText: "Cancel"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: skillId ? "Updating Skill..." : "Adding Skill...",
                                text: "Please wait...",
                                icon: "info",
                                allowOutsideClick: false,
                                showConfirmButton: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            $.ajax({
                                url: url,
                                type: method,
                                processData: false,
                                contentType: false,
                                data: formData,
                                success: function () {
                                    Swal.fire({
                                        title: "Success!",
                                        text: skillId ? "Skill updated successfully." : "Skill added successfully.",
                                        icon: "success",
                                        timer: 1500,
                                        showConfirmButton: false
                                    });

                                    skillInput.val("");
                                    $("#skillid").val("");
                                    loadSkills();
                                },
                                error: function () {
                                    Swal.fire({
                                        title: "Error!",
                                        text: "Failed to save skill. Please try again.",
                                        icon: "error"
                                    });
                                }
                            });
                        }
                    });
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "Failed to check existing skills.",
                        icon: "error"
                    });
                }
            });
        }

        function editSkill(skillId) {
            if (!skillId) {
                Swal.fire({
                    title: "Error!",
                    text: "Invalid skill ID. Please try again.",
                    icon: "error"
                });
                return;
            }

            Swal.fire({
                title: "Fetching Skill...",
                text: "Please wait while we retrieve the skill details.",
                icon: "info",
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            $.ajax({
                url: `http://localhost:5086/api/UserDetails/GetOneSkill/${skillId}`,
                type: "GET",
                success: function (response) {
                    Swal.close();

                    if (!response || !response.data) {
                        Swal.fire({
                            title: "Error!",
                            text: "Skill data not found.",
                            icon: "error"
                        });
                        return;
                    }

                    $("#skillInput").val(response.data.c_skill_name);
                    $("#skillid").val(skillId);
                    $("#skillInput").focus();

                    Swal.fire({
                        title: "Edit Skill",
                        text: `You are now editing: ${response.data.c_skill_name}`,
                        icon: "success",
                        timer: 1500,
                        showConfirmButton: false
                    });
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "Failed to fetch skill details. Please try again.",
                        icon: "error"
                    });
                }
            });
        }

        function deleteSkill(skillId) {
            Swal.fire({
                title: "Delete Skill?",
                text: "Are you sure you want to delete this skill?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "Cancel"
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Deleting...",
                        text: "Please wait...",
                        icon: "info",
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    $.ajax({
                        url: `http://localhost:5086/api/UserDetails/DeleteUserSkills/${skillId}`,
                        type: "DELETE",
                        success: function () {
                            Swal.fire({
                                title: "Deleted!",
                                text: "Skill has been deleted successfully.",
                                icon: "success",
                                timer: 1500,
                                showConfirmButton: false
                            });
                            loadSkills();
                        },
                        error: function () {
                            Swal.fire({
                                title: "Error!",
                                text: "Failed to delete skill. Please try again.",
                                icon: "error"
                            });
                        }
                    });
                }
            });
        }
    </script>

    <script>
        const predefinedSkills = [
    "Web Technologies", "Mobile App", "Web Application", "Web Development", "Web Designing", 
    "HTML", "CSS", "Javascript", "React.js", "node", "Express", "MongoDB", 
    "C++", "Python", "Bootstrap", "MySQL", "NoSQL", "Mean Stack"
];

function loadPredefinedSkills() {
    const container = document.getElementById("predefinedSkills");
    container.innerHTML = "";

    predefinedSkills.forEach(skill => {
        const btn = document.createElement("button");
        btn.className = "predefined-skill-btn";
        btn.innerText = skill;
        btn.onclick = () => addPredefinedSkill(skill);
        container.appendChild(btn);
    });
}

function addPredefinedSkill(skill) {
    document.getElementById("skillInput").value = skill;
    saveSkill();
}

// Call when page loads
document.addEventListener("DOMContentLoaded", loadPredefinedSkills);
</script>
    </script>
}

